












					git describe --contains --all HEAD ;;
					git describe --contains HEAD ;;
					git describe --tags --exact-match HEAD ;;
					git describe --tags HEAD ;;
					git describe HEAD ;;
				(* | default)
				(branch)
				(contains)
				(describe)
				(tag)
				case "${GIT_PS1_DESCRIBE_STYLE-}" in
				esac 2>/dev/null)" || b="$short_sha...";
                                            $NVM_NPM_CMD install -g npm;
                                            $NVM_NPM_CMD install -g npm@7;
                                            [ $NVM_IS_13_OR_ABOVE -eq 1 ] && [ $NVM_IS_14_LTS_OR_ABOVE -eq 0 ]
                                            [ $NVM_IS_15_OR_ABOVE -eq 1 ] && [ $NVM_IS_16_OR_ABOVE -eq 0 ]
                                            nvm_echo '* Installing latest `npm`; if this does not work on your node version, please report a bug!';
                                            nvm_echo '* `npm` `v7.x` is the last version that works on `node` `v13`, `v15`, below `v12.13`, or `v14.0` - `v14.15`';
                                        $NVM_NPM_CMD install -g npm@6;
                                        NVM_LTS="${PATTERN##lts/}";
                                        NVM_LTS='*';
                                        PATTERN=''
                                        PATTERN=''
                                        else
                                        fi;
                                        if [ $NVM_IS_12_LTS_OR_ABOVE -eq 0 ] || { 
                                        nvm_echo '* `npm` `v6.x` is the last version that works on `node` below `v10.0.0`';
                                        } || { 
                                        }; then
                                    $NVM_NPM_CMD install -g npm@6.9;
                                    'lts/*')
                                    ;;
                                    ;;
                                    COMPREPLY[i]+=/;
                                    [ $NVM_IS_6_OR_ABOVE -eq 1 ] && [ $NVM_IS_6_2_OR_ABOVE -eq 0 ]
                                    [ $NVM_IS_9_OR_ABOVE -eq 1 ] && [ $NVM_IS_9_3_OR_ABOVE -eq 0 ]
                                    command sha1 -q "${FILE}";
                                    compopt -o nospace;
                                    else
                                    fi;
                                    if [ $NVM_IS_10_OR_ABOVE -eq 0 ]; then
                                    lts/*)
                                    nvm_echo '* `npm` `v6.9` is the last version that works on `node` `v6.0.x`, `v6.1.x`, `v9.0.x`, `v9.1.x`, or `v9.2.x`';
                                    nvm_echo 'sha1';
                                    nvm_err 'Computing checksum with sha1 -q';
                                    nvm_err 'Unaliased sha1sum or sha1 not found.';
                                    nvm_err 'Unaliased sha256sum, shasum, sha256, gsha256sum, openssl, or bssl not found.';
                                    return 1;
                                $NVM_NPM_CMD install -g npm@5;
                                ( nvm_cd "$(npm root -g)/../${LINK}" && npm link )
                                ( nvm_cd "${LINK}" && npm link )
                                TARGET="${1-}";
                                case "${PATTERN}" in 
                                command sha1sum "${FILE}" | command awk '{print $1}';
                                continue;
                                else
                                else
                                esac;
                                fi;
                                fi;
                                fi;
                                fi;
                                if [[ -d ${COMPREPLY[i]} ]]; then
                                if nvm_has_non_aliased "sha1"; then
                                if nvm_has_non_aliased 'sha1'; then
                                if { 
                                nobinary=1;
                                nvm_echo '* `npm` `v5.x` is the last version that works on `node` below `v6.0.0`';
                                nvm_echo 'sha1sum';
                                nvm_err "Currently, there is no binary of version ${VERSION} for SunOS";
                                nvm_err 'Computing checksum with sha1sum';
                                unset 'COMPREPLY[i]';
                                } || { 
                                }; then
                            $NVM_NPM_CMD install -g npm@5.4.1;
                            '/'*)
                            *)
                            ;;
                            ;;
                            ALIAS="${1-}";
                            COMPREPLY[i]=${COMPREPLY[i]#/usr/share/zoneinfo/};
                            NVM_IS_6_2_OR_ABOVE=1;
                            NVM_IS_9_3_OR_ABOVE=1;
                            NVM_SILENT="${NVM_SILENT:-0}" nvm_rc_version && has_checked_nvmrc=1;
                            PATTERN="${1-}";
                            PROVIDED_VERSION="$1";
                            break;
                            break;
                            command bssl sha256sum "${FILE}" | command awk '{print $1}';
                            else
                            else
                            else
                            else
                            fi;
                            fi;
                            fi;
                            fi;
                            fi;
                            fi;
                            fi;
                            if ! nvm_has_solaris_binary "${VERSION}"; then
                            if [ "${TARGET}" = '--' ]; then
                            if [ $NVM_IS_6_OR_ABOVE -eq 0 ]; then
                            if [ -z "${NVM_LTS-}" ]; then
                            if [[ ${COMPREPLY[i]} == *.tab ]]; then
                            if nvm_has_non_aliased "sha1sum"; then
                            if nvm_has_non_aliased 'sha1sum'; then
                            nvm --help 1>&2;
                            nvm err '-s and -b cannot be set together since they would skip install from both binary and source';
                            nvm err '-s and -b cannot be set together since they would skip install from both binary and source';
                            nvm_echo "Now using system version of io.js: $(iojs --version 2>/dev/null)$(nvm_print_npm_version)";
                            nvm_echo "Running io.js $(nvm_strip_iojs_prefix "${VERSION}")$(nvm use --silent "${VERSION}" && nvm_print_npm_version)";
                            nvm_echo "Running node ${VERSION}$(nvm use --silent "${VERSION}" && nvm_print_npm_version)";
                            nvm_echo '* `npm` `v5.4.1` is the last version that works on `node` `v4.5` and `v4.6`';
                            nvm_echo 'bssl';
                            nvm_err '--default and --alias are mutually exclusive, and may not be provided more than once';
                            nvm_err '--default and --alias are mutually exclusive, and may not be provided more than once';
                            nvm_err '--reinstall-packages-from may not be provided more than once';
                            nvm_err '--reinstall-packages-from may not be provided more than once';
                            nvm_err '--reinstall-packages-from may not be provided more than once, or combined with `--copy-packages-from`';
                            nvm_err '--reinstall-packages-from may not be provided more than once, or combined with `--copy-packages-from`';
                            nvm_err 'Computing checksum with bssl sha256sum';
                            nvm_err 'If --copy-packages-from is provided, it must point to an installed version of node.';
                            nvm_err 'If --copy-packages-from is provided, it must point to an installed version of node.';
                            nvm_err 'If --reinstall-packages-from is provided, it must point to an installed version of node.';
                            nvm_err 'If --reinstall-packages-from is provided, it must point to an installed version of node.';
                            nvm_err 'System version of node not found.';
                            return 127;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            return 6;
                            shift;
                            shift;
                            shift;
                            unset NVM_RC_VERSION;
                        $NVM_NPM_CMD install -g npm@5.3;
                        ((ahead++))
                        ((behind++))
                        ADDITIONAL_PARAMETERS="${ADDITIONAL_PARAMETERS} $1"
                        ALIAS="${1##--alias=}";
                        ALIAS='default';
                        COMPREPLY+=($host);
                        COMPREPLY=($(compgen -W '$(locale -a 2>/dev/null)'                     -- "$cur" ));
                        EXIT_CODE=$?;
                        EXIT_CODE=87;
                        FORMAT="\033[${INSTALLED_COLOR}%15s\033[0m";
                        FORMAT='%15s *';
                        LTS="${1##--lts=}";
                        LTS='*';
                        LTS_FORMAT="  %${LTS_LENGTH}s";
                        LTS_FORMAT="  %${LTS_LENGTH}s";
                        LTS_FORMAT="  \\033[${NVM_LATEST_LTS_COLOR}%${LTS_LENGTH}s\\033[0m";
                        LTS_FORMAT="  \\033[${NVM_OLD_LTS_COLOR}%${LTS_LENGTH}s\\033[0m";
                        LTS_MSG="(with LTS filter '${LTS}') ";
                        NVM_DELETE_PREFIX=1
                        NVM_IS_10_OR_ABOVE=1;
                        NVM_IS_12_LTS_OR_ABOVE=1;
                        NVM_IS_13_OR_ABOVE=1;
                        NVM_IS_14_LTS_OR_ABOVE=1;
                        NVM_IS_15_OR_ABOVE=1;
                        NVM_IS_16_OR_ABOVE=1;
                        NVM_IS_4_4_OR_BELOW=1;
                        NVM_IS_5_OR_ABOVE=1;
                        NVM_IS_6_OR_ABOVE=1;
                        NVM_IS_9_OR_ABOVE=1;
                        NVM_LTS="${1##--lts=}"
                        NVM_LTS="${1##--lts=}"
                        NVM_LTS="${1##--lts=}"
                        NVM_LTS="${1##--lts=}";
                        NVM_LTS="${1##--lts=}";
                        NVM_LTS='*'
                        NVM_LTS='*'
                        NVM_LTS='*'
                        NVM_LTS='*';
                        NVM_LTS='*';
                        NVM_NO_ALIAS="${1}"
                        NVM_NO_COLORS="${1}"
                        NVM_NO_COLORS="${1}"
                        NVM_NO_COLORS="${1}"
                        NVM_NO_COLORS="${j}";
                        NVM_NO_PROGRESS="${NVM_NO_PROGRESS:-${noprogress}}" nvm_install_source "${FLAVOR}" std "${VERSION}" "${NVM_MAKE_JOBS}" "${ADDITIONAL_PARAMETERS}";
                        NVM_SILENT="${NVM_SILENT:-0}" nvm_rc_version && has_checked_nvmrc=1;
                        NVM_SILENT=1
                        NVM_SILENT=1
                        NVM_SILENT=1;
                        NVM_SILENT=1;
                        NVM_SILENT=1;
                        NVM_SILENT_ARG='--silent'
                        NVM_SILENT_ARG='--silent';
                        NVM_TOOL_VERSION="$(command "${tool}" --help 2>&1 | command head -n 1)";
                        NVM_TOOL_VERSION="$(command "${tool}" --version 2>&1 | command head -n 1)";
                        NVM_UPGRADE_NPM=1;
                        OS_VERSION="$(. /etc/os-release && echo "${NAME}" "${VERSION}")";
                        PATTERN="${PATTERN:-$1}"
                        PATTERN="${PATTERN:-${1}}"
                        PROVIDED_REINSTALL_PACKAGES_FROM="$(nvm_echo "$1" | command cut -c 22-)";
                        PROVIDED_REINSTALL_PACKAGES_FROM="$(nvm_echo "$1" | command cut -c 22-)";
                        PROVIDED_REINSTALL_PACKAGES_FROM="$(nvm_echo "$1" | command cut -c 27-)";
                        PROVIDED_REINSTALL_PACKAGES_FROM="$(nvm_echo "$1" | command cut -c 27-)";
                        PROVIDED_VERSION="${NVM_RC_VERSION}";
                        REINSTALL_PACKAGES_FROM="$(nvm_version "${PROVIDED_REINSTALL_PACKAGES_FROM}")" || :
                        REINSTALL_PACKAGES_FROM="$(nvm_version "${PROVIDED_REINSTALL_PACKAGES_FROM}")" || :
                        REINSTALL_PACKAGES_FROM="$(nvm_version "${PROVIDED_REINSTALL_PACKAGES_FROM}")" || :;
                        REINSTALL_PACKAGES_FROM="$(nvm_version "${PROVIDED_REINSTALL_PACKAGES_FROM}")" || :;
                        REMOTE_CMD="nvm ls-remote --lts=${LTS}";
                        REMOTE_CMD='nvm ls-remote';
                        SKIP_DEFAULT_PACKAGES=true
                        SKIP_DEFAULT_PACKAGES=true;
                        VERSION="$(nvm_version "${NVM_RC_VERSION}")" || :;
                        VERSION="$(nvm_version "${PROVIDED_VERSION}")";
                        VERSION="$(nvm_version "${provided_version}")" || :;
                        [ $NVM_IS_5_OR_ABOVE -eq 1 ] && nvm_version_greater 5.10.0 "${NODE_VERSION}"
                        [[ $char != '[' ]] && printf '%s\n' -$char;
                        [[ $host == *[*?]* ]] && continue;
                        _filedir;
                        _terms;
                        break
                        break
                        break;
                        case "${LINK}" in 
                        char=${option:i:1};
                        command openssl dgst -sha256 "${FILE}" | command awk '{print $NF}';
                        cur=/usr/share/zoneinfo/$cur;
                        do
                        done;
                        else
                        else
                        else
                        else
                        else
                        else
                        else
                        esac;
                        fi
                        fi
                        fi
                        fi
                        fi
                        fi
                        fi
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        fi;
                        for i in "${!COMPREPLY[@]}";
                        host="${host#[}";
                        host="${host%]?(:+([0-9]))}";
                        if [ "${ALIAS}" = '--' ]; then
                        if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                        if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                        if [ "_${NVM_OS}" = "_sunos" ]; then
                        if [ $# -gt 0 ]; then
                        if [ $NVM_IS_4_4_OR_BELOW -eq 0 ] && nvm_version_greater 4.7.0 "${NODE_VERSION}"; then
                        if [ $has_checked_nvmrc -ne 1 ]; then
                        if [ $nobinary -eq 1 ]; then
                        if [ $nosource -eq 1 ]; then
                        if [ $version_not_provided -eq 1 ] && [ -z "${NVM_RC_VERSION}" ]; then
                        if [ -n "$1" ]; then
                        if [ -n "$1" ]; then
                        if [ -n "${1-}" ]; then
                        if [ -n "${ALIAS-}" ]; then
                        if [ -n "${ALIAS-}" ]; then
                        if [ -n "${PROVIDED_REINSTALL_PACKAGES_FROM-}" ]; then
                        if [ -n "${PROVIDED_REINSTALL_PACKAGES_FROM-}" ]; then
                        if [ -n "${PROVIDED_REINSTALL_PACKAGES_FROM-}" ]; then
                        if [ -n "${PROVIDED_REINSTALL_PACKAGES_FROM-}" ]; then
                        if [ -z "${PATTERN-}" ]; then
                        if [ -z "${PROVIDED_REINSTALL_PACKAGES_FROM}" ]; then
                        if [ -z "${PROVIDED_REINSTALL_PACKAGES_FROM}" ]; then
                        if [ -z "${PROVIDED_REINSTALL_PACKAGES_FROM}" ]; then
                        if [ -z "${PROVIDED_REINSTALL_PACKAGES_FROM}" ]; then
                        if nvm_has_non_aliased "bssl"; then
                        if nvm_has_non_aliased 'bssl'; then
                        if nvm_is_iojs_version "${VERSION}"; then
                        if nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 6.2.0; then
                        if nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 9.3.0; then
                        nobinary=1;
                        nobinary=1;
                        noprogress=1;
                        nosource=1;
                        nvm install-latest-npm;
                        nvm reinstall-packages "${REINSTALL_PACKAGES_FROM}";
                        nvm use --silent > /dev/null;
                        nvm_echo "${NVM_BIN}";
                        nvm_echo "${NVM_DIR}/*/lib/node_modules removed from \${NODE_PATH}";
                        nvm_echo "${NVM_DIR}/*/share/man removed from \${MANPATH}";
                        nvm_echo "Installing with latest version of LTS line: ${LTS}";
                        nvm_echo "Now using system version of node: $(node -v 2>/dev/null)$(nvm_print_npm_version)";
                        nvm_echo "Running node LTS \"${NVM_LTS-}\" -> $(nvm_version "${VERSION}")$(nvm use --silent "${VERSION}" && nvm_print_npm_version)";
                        nvm_echo '* `npm` `v5.3.x` is the last version that works on `node` 4.x versions below v4.4, or 5.x versions below v5.10, due to `Buffer.alloc`';
                        nvm_echo 'nvm cache cleared.';
                        nvm_echo 'openssl';
                        nvm_err "! WARNING: Version '${TARGET}' does not exist.";
                        nvm_err "${1-} is a default (built-in) alias and cannot be deleted.";
                        nvm_err "${tool}: $(nvm_command_info "${tool}")";
                        nvm_err "${tool}: not found";
                        nvm_err "Could not find ${NVM_DIR}/*/share/man in \${MANPATH}";
                        nvm_err "Currently, there is no binary for OpenBSD";
                        nvm_err "If ${1} is provided, it must point to an installed version of node using \`=\`.";
                        nvm_err "If ${1} is provided, it must point to an installed version of node using \`=\`.";
                        nvm_err "The alias \"${PROVIDED_VERSION}\" leads to an infinite loop. Aborting.";
                        nvm_err "Unable to clear nvm cache: ${DIR}";
                        nvm_err "Unsupported option \"$1\".";
                        nvm_err "Unsupported option \"${1}\".";
                        nvm_err "Unsupported option \"${1}\".";
                        nvm_err "Unsupported option \"${1}\".";
                        nvm_err "Unsupported option \"${1}\".";
                        nvm_err 'Aliases in subdirectories are not supported.';
                        nvm_err 'Computing checksum with openssl dgst -sha256';
                        nvm_err 'Installing from source on non-WSL Windows is not supported';
                        nvm_err 'Please see `nvm --help` or https://github.com/nvm-sh/nvm#nvmrc for more information.';
                        nvm_err 'arguments with `---` are not supported - this is likely a typo';
                        nvm_get_make_jobs "$1";
                        nvm_get_make_jobs;
                        nvm_install_default_packages "${DEFAULT_PACKAGES}";
                        nvm_rc_version;
                        provided_version="${1-}"
                        provided_version="${NVM_RC_VERSION}";
                        provided_version="${NVM_RC_VERSION}";
                        provided_version='';
                        r="|BISECTING";
                        r="|CHERRY-PICKING";
                        r="|REVERTING";
                        return 0
                        return 0
                        return 0
                        return 0
                        return 0
                        return 1
                        return 127;
                        return 1;
                        return 1;
                        return 55
                        return 55
                        return 55
                        return 55
                        return 55
                        return 55
                        return 6
                        return 6
                        return;
                        return;
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift
                        shift;
                        shift;
                        shift;
                        shift;
                        shift;
                        shift;
                        unset ALIAS;
                        unset NVM_RC_VERSION;
                        unset NVM_RC_VERSION;
                        unset NVM_RC_VERSION;
                        xspec=$errx
                        xspec=$inx
                        xspec=$outx
                       compgen -G "${cur}*.crash" ))
                       compgen -G "${cur}*.crash" ))
                    "<"*)
                    "stable" | "unstable" | "${NVM_IOJS_PREFIX}" | "${NVM_NODE_PREFIX}" | "system")
                    $NVM_NPM_CMD install -g npm@2;
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}" "${COMP_WORDS[${#COMP_WORDS[@]}-2]}";
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}";
                    (( index -= old_size - new_size ));
                    *'<'*)
                    *'>'*)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    *)
                    --)
                    --)
                    --)
                    --)
                    --)
                    --)
                    --)
                    --)
                    --*)
                    --*)
                    --*)
                    --*)
                    --*)
                    --*)
                    ---*)
                    --alias=*)
                    --copy-packages-from=*)
                    --copy-packages-from=*)
                    --default)
                    --delete-prefix)
                    --latest-npm)
                    --lts)
                    --lts)
                    --lts)
                    --lts)
                    --lts)
                    --lts)
                    --lts=*)
                    --lts=*)
                    --lts=*)
                    --lts=*)
                    --lts=*)
                    --lts=*)
                    --no-alias)
                    --no-colors)
                    --no-colors)
                    --no-colors)
                    --no-progress)
                    --reinstall-packages-from | --copy-packages-from)
                    --reinstall-packages-from | --copy-packages-from)
                    --reinstall-packages-from=*)
                    --reinstall-packages-from=*)
                    --silent)
                    --silent)
                    --silent)
                    --silent)
                    --silent)
                    --skip-default-packages)
                    --skip-default-packages)
                    -b)
                    -j)
                    -s)
                    2'>'*)
                    :;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ALIAS_FORMAT="\033[${NOT_INSTALLED_COLOR}%s\033[0m";
                    BLACK_INFO='\033[0;30m k\033[0m/\033[1;30mK\033[0m = \033[0;30mblack\033[0m / \033[1;30mbold black\033[0m';
                    BLACK_INFO='k/K = black / bold black';
                    BLUE_INFO='\033[0;34m b\033[0m/\033[1;34mB\033[0m = \033[0;34mblue\033[0m / \033[1;34mbold blue\033[0m';
                    BLUE_INFO='b/B = blue / bold blue';
                    COMPREPLY+=($host);
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($(compgen -g -- "$mycur"));
                    COMPREPLY=($(compgen -u -- "$cur"));
                    CYAN_INFO='\033[0;36m c\033[0m/\033[1;36mC\033[0m = \033[0;36mcyan\033[0m / \033[1;36mbold cyan\033[0m';
                    CYAN_INFO='c/C = cyan / bold cyan';
                    DEST_FORMAT="\033[${NOT_INSTALLED_COLOR}%s\033[0m";
                    DIR="$(nvm_cache_dir)";
                    EXIT_CODE=$?;
                    EXIT_CODE=$?;
                    EXIT_CODE=$?;
                    EXIT_CODE=$?;
                    FORMAT="\033[${SYSTEM_COLOR}%15s\033[0m";
                    FORMAT='%15s *';
                    GREEN_INFO='\033[0;32m g\033[0m/\033[1;32mG\033[0m = \033[0;32mgreen\033[0m / \033[1;32mbold green\033[0m';
                    GREEN_INFO='g/G = green / bold green';
                    GREY_WHITE_INFO='\033[0;37m e\033[0m/\033[1;37mW\033[0m = \033[0;37mlight grey\033[0m / \033[1;37mwhite\033[0m';
                    GREY_WHITE_INFO='e/W = light grey / white';
                    IFS=$OIFS;
                    INFO="$(type "${COMMAND}" | command awk '{print $3}')";
                    INFO="$(type "${COMMAND}")";
                    INITIAL_COLOR_INFO='\033[0;32m g\033[0m \033[0;34m b\033[0m \033[0;33m y\033[0m \033[0;31m r\033[0m \033[0;37m e\033[0m';
                    INITIAL_COLOR_INFO='gbYre';
                    LANG | LC_*)
                    LTS="$(echo "${LTS}" | tr '[:upper:]' '[:lower:]')";
                    LTS="${LTS##Latest }";
                    LTS="${provided_version##lts/}";
                    LTS='*';
                    LTS_LENGTH="${#LTS}";
                    LTS_LENGTH="${#LTS}";
                    LTS_MSG='(with LTS filter) ';
                    MAGENTA_INFO='\033[0;35m m\033[0m/\033[1;35mM\033[0m = \033[0;35mmagenta\033[0m / \033[1;35mbold magenta\033[0m';
                    MAGENTA_INFO='m/M = magenta / bold magenta';
                    MANPATH=$(manpath);
                    NVM_ADD_SYSTEM=true;
                    NVM_ADD_SYSTEM=true;
                    NVM_BIN="$(nvm use system >/dev/null 2>&1 && command which node)";
                    NVM_IS_10_OR_ABOVE=0;
                    NVM_IS_12_LTS_OR_ABOVE=0;
                    NVM_IS_13_OR_ABOVE=0;
                    NVM_IS_14_LTS_OR_ABOVE=0;
                    NVM_IS_15_OR_ABOVE=0;
                    NVM_IS_16_OR_ABOVE=0;
                    NVM_IS_4_4_OR_BELOW=0;
                    NVM_IS_5_OR_ABOVE=0;
                    NVM_IS_6_2_OR_ABOVE=0;
                    NVM_IS_6_OR_ABOVE=0;
                    NVM_IS_9_3_OR_ABOVE=0;
                    NVM_IS_9_OR_ABOVE=0;
                    NVM_LTS="${PATTERN##lts/}";
                    NVM_LTS='*';
                    NVM_METHOD_PREFERENCE='source';
                    NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_CURRENT="${NVM_CURRENT-}" DEFAULT=false nvm_print_formatted_alias "${ALIAS}" "${TARGET}" "${VERSION}";
                    NVM_NO_PROGRESS="${NVM_NO_PROGRESS:-${noprogress}}" nvm_install_binary "${FLAVOR}" std "${VERSION}" "${nosource}";
                    NVM_SILENT="${NVM_SILENT:-0}" nvm_rc_version;
                    NVM_USE_CMD="${NVM_USE_CMD} ${VERSION}";
                    NVM_USE_CMD="${NVM_USE_CMD} --silent";
                    NVM_USE_OUTPUT="Now using io.js $(nvm_strip_iojs_prefix "${VERSION}")$(nvm_print_npm_version)";
                    NVM_USE_OUTPUT="Now using node ${VERSION}$(nvm_print_npm_version)";
                    OS_VERSION="$(command head -n 1 /etc/issue | command sed 's/\\.//g')";
                    PATTERN="${PATTERN%.}.";
                    RED_INFO='\033[0;31m r\033[0m/\033[1;31mR\033[0m = \033[0;31mred\033[0m / \033[1;31mbold red\033[0m';
                    RED_INFO='r/R = red / bold red';
                    REMOTE_CMD='nvm ls-remote --lts';
                    TERM)
                    TZ)
                    UNSTABLE="${MINOR}";
                    VERSION="$(nvm_match_version "${PROVIDED_VERSION}")";
                    VERSION="$(nvm_match_version "lts/${PATTERN##--lts=}")"
                    VERSION="$(nvm_match_version "lts/${PATTERN##lts/}")"
                    VERSION="$(nvm_match_version "lts/*")"
                    VERSION="$(nvm_version "${NVM_RC_VERSION-}")" || :;
                    VERSION="$(nvm_version "${PATTERN}")"
                    VERSION="$(nvm_version "${TARGET}")" || :;
                    VERSION="$(nvm_version "${provided_version}")" || :;
                    VERSION="$(nvm_version "${provided_version}")" || :;
                    VERSION="$(nvm_version "${provided_version}")" || :;
                    VERSION="${provided_version-}";
                    VERSION=$(nvm_version "${NVM_RC_VERSION}") || :;
                    VERSION_FORMAT="\033[${NOT_INSTALLED_COLOR}%s\033[0m";
                    YELLOW_INFO='\033[0;33m y\033[0m/\033[1;33mY\033[0m = \033[0;33myellow\033[0m / \033[1;33mbold yellow\033[0m';
                    YELLOW_INFO='y/Y = yellow / bold yellow';
                    [[ $1 == @* ]] && shift;
                    [[ $1 == [\|\#]* ]] && continue;
                    [[ $index -gt 0 ]] && ((index--));
                    __parse_options "$option"
                    _allowed_groups "$mycur";
                    _allowed_users "$cur";
                    _apport_parameterless
                    _apport_parameterless
                    _apport_parameterless
                    _apport_parameterless
                    _filedir -d;
                    _filedir;
                    b="$(
                    b="($b)";
                    break;
                    command gsha256sum "${FILE}" | command awk '{print $1}';
                    compopt -o $opt;
                    cspec=${cspec#$opt};
                    cspec=${cspec#*-o };
                    cur="${cur#${words[i]}}";
                    cur="${cur:1}";
                    detached=yes;
                    do
                    do
                    done
                    done;
                    echo "bash_completion: $FUNCNAME: $1:" "missing argument(s)" 1>&2;
                    echo "bash_completion: $FUNCNAME:" "\`$1': missing number specifier" 1>&2;
                    echo bash_completion: "$FUNCNAME: \`$1${2+ }$2': missing argument(s)" 1>&2;
                    echo bash_completion: "$FUNCNAME: \`$1': invalid number specifier" 1>&2;
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    else
                    export MANPATH="${NEWPATH}";
                    export NODE_PATH="${NEWPATH}";
                    fi
                    fi
                    fi
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    fi;
                    for ((i=1; i < ${#option}; i++ ))
                    for host in $1;
                    host=${host/%.pub/};
                    host=${i/#*key_22_/};
                    i="#";
                    i=${#BASH_REMATCH[1]};
                    if [ "${ALIAS#*\/}" != "${ALIAS}" ]; then
                    if [ "${ALIAS-}" = '--' ]; then
                    if [ "${NVM_HAS_COLORS-}" = '1' ]; then
                    if [ "${NVM_HAS_COLORS-}" = '1' ]; then
                    if [ "${NVM_HAS_COLORS-}" = '1' ]; then
                    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                    if [ "${NVM_UPGRADE_NPM}" = 1 ]; then
                    if [ "${VERSION}" = 'N/A' ]; then
                    if [ "${j}" = '--no-colors' ]; then
                    if [ "_$NVM_OS" = "_openbsd" ]; then
                    if [ "_${LTS-}" != '_' ]; then
                    if [ "_${NVM_OS}" = "_win" ]; then
                    if [ "_${VERSION:-N/A}" = '_N/A' ] && ! nvm_is_valid_version "${provided_version}"; then
                    if [ "_${VERSION}" = '_N/A' ] && ! nvm_is_valid_version "${provided_version}"; then
                    if [ $# -gt 0 ]; then
                    if [ $NVM_IS_10_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 12.13.0; then
                    if [ $NVM_IS_12_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 13.0.0; then
                    if [ $NVM_IS_13_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 14.15.0; then
                    if [ $NVM_IS_14_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 15.0.0; then
                    if [ $NVM_IS_15_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 16.0.0; then
                    if [ $NVM_IS_4_4_OR_BELOW -eq 0 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 5.0.0; then
                    if [ $NVM_IS_4_4_OR_BELOW -eq 1 ] || { 
                    if [ $NVM_IS_5_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 6.0.0; then
                    if [ $NVM_IS_6_2_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 9.0.0; then
                    if [ $NVM_IS_9_3_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 10.0.0; then
                    if [ -f "$g/BISECT_LOG" ]; then
                    if [ -n "${LINK}" ]; then
                    if [ -n "${LTS-}" ]; then
                    if [ -n "${NVM_BIN}" ]; then
                    if [ -n "${NVM_LTS-}" ]; then
                    if [ -n "${NVM_RC_VERSION-}" ]; then
                    if [ -n "${REINSTALL_PACKAGES_FROM-}" ] && [ "_${REINSTALL_PACKAGES_FROM}" != "_N/A" ]; then
                    if [ -z "${NVM_MAKE_JOBS-}" ]; then
                    if [ -z "${OS_VERSION}" ] && [ -r "/etc/os-release" ]; then
                    if [ -z "${SKIP_DEFAULT_PACKAGES-}" ] && [ -n "${DEFAULT_PACKAGES-}" ]; then
                    if [ -z "${VERSION}" ]; then
                    if command ls -l "$(nvm_command_info "${tool}" | command awk '{print $1}')" | command grep -q busybox; then
                    if command rm -rf "${DIR}" && command mkdir -p "${DIR}"; then
                    if nvm_has "${tool}"; then
                    if nvm_has_non_aliased "openssl"; then
                    if nvm_has_non_aliased 'openssl'; then
                    if nvm_has_system_iojs && nvm deactivate "${NVM_SILENT_ARG-}" > /dev/null 2>&1; then
                    if nvm_rc_version > /dev/null 2>&1; then
                    if nvm_version_greater 4.5.0 "${NODE_VERSION}"; then
                    line=${line##@(*/|-)};
                    line=${line%% *};
                    local DIR;
                    local IFS='
                    local IFS='
                    local IFS=,;
                    local MANPATH;
                    local NVM_BIN;
                    local NVM_IS_10_OR_ABOVE;
                    local NVM_IS_12_LTS_OR_ABOVE;
                    local NVM_IS_13_OR_ABOVE;
                    local NVM_IS_14_LTS_OR_ABOVE;
                    local NVM_IS_15_OR_ABOVE;
                    local NVM_IS_16_OR_ABOVE;
                    local NVM_IS_4_4_OR_BELOW;
                    local NVM_IS_5_OR_ABOVE;
                    local NVM_IS_6_2_OR_ABOVE;
                    local NVM_IS_6_OR_ABOVE;
                    local NVM_IS_9_3_OR_ABOVE;
                    local NVM_IS_9_OR_ABOVE;
                    local new_size="${#cur}";
                    local old_size="${#cur}";
                    nobinary=1;
                    nvm --help 1>&2;
                    nvm --help 1>&2;
                    nvm alias "${ALIAS}" "${provided_version}";
                    nvm alias --no-colors;
                    nvm alias;
                    nvm exec "${NVM_SILENT_ARG-}" "${LTS_ARG-}" "${VERSION}" iojs "$@";
                    nvm exec "${NVM_SILENT_ARG-}" "${LTS_ARG-}" "${VERSION}" node "$@";
                    nvm install-latest-npm;
                    nvm reinstall-packages "${REINSTALL_PACKAGES_FROM}";
                    nvm use --silent "${VERSION}" > /dev/null;
                    nvm_cache_dir
                    nvm_download -L https://npmjs.org/install.sh -o - | clean=yes npm_install=0.2.19 sh;
                    nvm_echo "${NVM_DIR}/*/bin removed from \${PATH}";
                    nvm_echo "${VERSION}";
                    nvm_echo "Running node latest LTS -> $(nvm_version "${VERSION}")$(nvm use --silent "${VERSION}" && nvm_print_npm_version)";
                    nvm_echo '* `npm` v2.x needs to first jump to the latest v2 to be able to upgrade further';
                    nvm_echo 'Installing latest LTS version.';
                    nvm_echo 'gsha256sum';
                    nvm_echo 'v0.6.21';
                    nvm_ensure_default_set "${provided_version}";
                    nvm_ensure_default_set "${provided_version}";
                    nvm_ensure_default_set "lts/${LTS}";
                    nvm_ensure_default_set "lts/${LTS}";
                    nvm_err "";
                    nvm_err "${tool}: $(nvm_command_info "${tool}"), ${NVM_TOOL_VERSION}";
                    nvm_err "${tool}: not found";
                    nvm_err "Could not find ${NVM_DIR}/*/bin in \${PATH}";
                    nvm_err "Currently, there is no binary for FreeBSD";
                    nvm_err "If --reinstall-packages-from is provided, it must point to an installed version of node.";
                    nvm_err "N/A: version \"${PROVIDED_VERSION} -> ${VERSION}\" is not yet installed.";
                    nvm_err "Only one package per line is allowed in the ${NVM_DIR}/default-packages file. Please remove any lines with multiple space-separated values.";
                    nvm_err "The alias \"${2}\" leads to an infinite loop. Aborting.";
                    nvm_err "You need to run \"nvm install ${PROVIDED_VERSION}\" to install it before using it.";
                    nvm_err "nvm: Cannot uninstall currently-active io.js version, ${VERSION} (inferred from ${PATTERN}).";
                    nvm_err "nvm: Cannot uninstall currently-active node version, ${VERSION} (inferred from ${PATTERN}).";
                    nvm_err '*** Third-party $NVM_INSTALL_THIRD_PARTY_HOOK env var claimed to succeed, but failed to install! ***';
                    nvm_err '*** Third-party $NVM_INSTALL_THIRD_PARTY_HOOK env var failed to install! ***';
                    nvm_err 'Computing checksum with gsha256sum';
                    nvm_err 'No system version of node or io.js detected.';
                    nvm_err 'npm requires node v0.2.3 or higher';
                    nvm_install_default_packages "${DEFAULT_PACKAGES}";
                    nvm_list_aliases "${ALIAS-}";
                    nvm_make_alias "${ALIAS}" "${TARGET}";
                    opt=${cspec%% *};
                    p="";
                    p[\ \	] | pick[\ \	]*)
                    procs+=($line);
                    procs+=(${BASH_REMATCH[1]});
                    provided_version="${NVM_RC_VERSION}";
                    provided_version=''
                    provided_version=''
                    r="|AM";
                    r="|AM/REBASE";
                    readlink -f "$(type -P "$1")";
                    return
                    return
                    return $?;
                    return $EXIT_CODE
                    return $EXIT_CODE;
                    return $exit;
                    return 1
                    return 1
                    return 1
                    return 1
                    return 1
                    return 11;
                    return 127
                    return 127;
                    return 1;
                    return 33;
                    return 3;
                    return 5;
                    return 8;
                    return 8;
                    return;
                    return;
                    revert[\ \	]*)
                    set +f;
                    set -- "${tmpkh[@]}";
                    shift;
                    svn_upstream=${svn_upstream#${svn_remote[$n]}};
                    type -P "$1";
                    unset IFS;
                    unset NVM_RC_VERSION;
                    unset PATTERN
                    unset PATTERN
                    upstream_type="@{upstream}";
                    upstream_type=${GIT_SVN_ID:-git-svn};
                    upstream_type=${svn_upstream#/};
                    }; then
                 -c --crash-file --save -v --version --tag -w --window';
                "${NVM_INSTALL_THIRD_PARTY_HOOK}" "${VERSION}" "${FLAVOR}" std "${NVM_METHOD_PREFERENCE}" "${VERSION_PATH}" || { 
                $NVM_NPM_CMD install -g npm@1.4.28;
                $NVM_NPM_CMD install -g npm@4;
                ${NVM_ADD_PREFIX_COMMAND} "${NVM_IOJS_VERSION}";
                'lts/*')
                'lts/*')
                ( set -f;
                (( $i < ${#COMP_WORDS[@]} - 1)) && ((i++)) || break 2;
                (( index -= old_size - new_size ));
                *)
                *)
                *)
                *)
                *)
                *)
                *)
                *)
                *Latest*)
                *\ *)
                *dir*)
                *file* | *path*)
                -*)
                -*)
                -*)
                -*)
                --)
                --lts | 'lts/*')
                --lts=*)
                -?(\[)+([a-zA-Z0-9?]))
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ALIAS_FORMAT="\033[${INSTALLED_COLOR}%s\033[0m";
                COLOR=$(nvm_echo "$SYS_COLOR" | command tr '0;' '1;')
                COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 1, 1); }')")
                COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 2, 1); }')")
                COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 3, 1); }')")
                COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 4, 1); }')")
                COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 5, 1); }')")
                COLOR='0;31m'
                COLOR='0;32m'
                COLOR='0;33m'
                COLOR='0;34m'
                COLOR='0;37m'
                COLOR='1;33m'
                COMPREPLY+=("$cur}");
                COMPREPLY+=("${BASH_REMATCH[1]}${BASH_REMATCH[2]}[${BASH_REMATCH[3]}]}");
                COMPREPLY+=(${arrs[*]});
                COMPREPLY+=(${vars[*]});
                COMPREPLY=($( compgen -W "--tag" -- $cur));
                COMPREPLY=($( compgen -W "-p --package --tag" -- $cur));
                COMPREPLY=($(compgen -W "$(command ls -B             /etc/sysconfig/interfaces |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
                COMPREPLY=($(compgen -W "$(printf '%s\n'             /etc/sysconfig/network-scripts/ifcfg-* |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
                COMPREPLY=($(compgen -g -- "$mycur"));
                COMPREPLY=($(eval compgen "$cspec" -- '$cur'));
                DEFAULT_PACKAGES="$(nvm_get_default_packages)";
                DEST_FORMAT="\033[${INSTALLED_COLOR}%s\033[0m";
                EXIT_CODE=$?;
                EXIT_CODE=$?;
                EXIT_CODE=0;
                FLAVOR="$(nvm_iojs_prefix)";
                FLAVOR="$(nvm_node_prefix)";
                FORMAT="\033[${CURRENT_COLOR}-> %12s\033[0m";
                FORMAT='-> %12s *';
                GIT_PS1_SHOWUPSTREAM="$value";
                IFS="${DEFAULT_IFS}" nvm "$@";
                IFS='
                INFO="$(which "${COMMAND}") ($(type "${COMMAND}" | command awk '{ $1=$2=$3=$4=$5="" ;print }' | command sed 's/^\ *//g'))";
                LC_ALL=C "$(dequote "$cmd")" ${2:---help} 2>&1
                LC_ALL=C "$(dequote "$cmd")" ${2:---usage} 2>&1
                LTS_ARG="--lts=${NVM_LTS-}";
                MANPATH="$(nvm_change_path "${MANPATH}" "/share/man" "${NVM_VERSION_DIR}")";
                NEWPATH="$(nvm_strip_path "${MANPATH}" "/share/man")";
                NEWPATH="$(nvm_strip_path "${NODE_PATH}" "/lib/node_modules")";
                NUM_VERSION_GROUPS="$(nvm_num_version_groups "${PATTERN}")";
                NVM_ADD_SYSTEM=true;
                NVM_ALIAS_EXISTS=1;
                NVM_AUTO_MODE='install'
                NVM_AUTO_MODE='none'
                NVM_COMMAND="nvm_ls ${NVM_IMPLICIT}";
                NVM_COMMAND="nvm_ls node";
                NVM_DEBUG_OUTPUT="$(${NVM_DEBUG_COMMAND} 2>&1)";
                NVM_DIRS_TO_SEARCH1="${NVM_VERSION_DIR_OLD}";
                NVM_DIRS_TO_SEARCH1="${NVM_VERSION_DIR_OLD}";
                NVM_DIRS_TO_SEARCH2="${NVM_VERSION_DIR_NEW}";
                NVM_DIRS_TO_SEARCH2="${NVM_VERSION_DIR_NEW}";
                NVM_DIRS_TO_SEARCH3="${NVM_VERSION_DIR_IOJS}";
                NVM_IOJS=true;
                NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
                NVM_IOJS_VERSION="$(nvm_echo "${NVM_IOJS_VERSION}" | command sed "s/^${NVM_IMPLICIT}-//" | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2 | uniq | command tail -1)";
                NVM_METHOD_PREFERENCE='binary';
                NVM_NODE_PREFIX="$(nvm_node_prefix)";
                NVM_NO_COLORS="";
                NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_CURRENT="${NVM_CURRENT}" nvm_print_default_alias "${ALIAS_NAME}";
                NVM_NO_COLORS="${NVM_NO_COLORS-}" nvm_print_versions "${NVM_OUTPUT}";
                NVM_SILENT="${NVM_SILENT:-0}" nvm_rc_version && has_checked_nvmrc=1;
                NVM_SILENT="${NVM_SILENT:-0}" nvm_rc_version;
                NVM_SUCCESS_MSG="Uninstalled io.js $(nvm_strip_iojs_prefix "${VERSION}")";
                NVM_SUCCESS_MSG="Uninstalled node ${VERSION}";
                NVM_USE_CMD="nvm use --delete-prefix";
                NVM_VERSION="$(nvm --version)";
                OS_VERSION="$(sw_vers | command awk '{print $2}' | command xargs)";
                PATTERN='';
                SLUG_BINARY="$(nvm_get_download_slug iojs binary std "${VERSION}")";
                SLUG_BINARY="$(nvm_get_download_slug node binary std "${VERSION}")";
                SLUG_SOURCE="$(nvm_get_download_slug iojs source std "${VERSION}")";
                SLUG_SOURCE="$(nvm_get_download_slug node source std "${VERSION}")";
                STABLE="${MINOR}";
                SYS_COLOR=$(nvm_print_color_code "$(echo "$NVM_COLORS" | awk '{ print substr($0, 2, 1); }')");
                TEST_TOOLS="${TEST_TOOLS} ${ADD_TEST_TOOLS}";
                VERSION="$(NVM_LTS="${NVM_LTS-}" nvm_ls_remote "${PATTERN}")" && :
                VERSION="$(NVM_LTS="${NVM_LTS-}" nvm_ls_remote_iojs | command tail -1)" && :
                VERSION="$(node --version 2>/dev/null)";
                VERSION="$(nvm_match_version "lts/${NVM_LTS:-*}")";
                VERSION="$(nvm_resolve_local_alias default 2>/dev/null || nvm_echo)";
                VERSION="$(nvm_version "${PROVIDED_VERSION}")" || :;
                VERSION="${provided_version}";
                VERSION="system";
                VERSION='';
                VERSIONS="$(command printf '%s' 'system')";
                VERSIONS="$(nvm_add_iojs_prefix "${PATTERN}")";
                VERSION_FORMAT="\033[${INSTALLED_COLOR}%s\033[0m";
                VERSION_PATH="$(nvm_version_path "${VERSION}")";
                [ -z "${ALIAS}" ] || [ "${ALIAS_NAME}" = "${ALIAS}" ]
                [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
                [[ $index -gt 0 ]] && ((index--));
                [[ $line != [[:blank:]]* ]] && (( j >= 2 )) && ((j--));
                [[ $line == [[:blank:]]* ]] && ((j++));
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\"\$3\" && shift 3 || { 
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\(\"\${@:3:${1#-a}}\"\) && shift $((${1#-a} + 2)) || { 
                [[ -n $option ]] || option=$i
                [[ -n ${1#-a} ]] || { 
                [[ -r $j ]] && kh+=("$j");
                [[ -r $j ]] && kh+=("$j");
                __expand_tilde_by_ref j;
                __expand_tilde_by_ref j;
                __git_eread "$g/rebase-apply/head-name" b;
                __git_ps1_show_upstream;
                __ltrim_colon_completions "$cur";
                __nvm_generate_completion "${COMMANDS}"
                __nvm_installed_nodes
                __nvm_options
                _allowed_groups "$mycur";
                _included_ssh_config_files $f;
                _minimal;
                aliases='yes'
                b="$(git symbolic-ref HEAD 2>/dev/null)";
                b="${head#ref: }";
                break
                break
                break
                break
                case "$1" in 
                case "$1" in 
                case "$1" in 
                case "$1" in 
                case "$1" in 
                case "$1" in 
                case "$commit" in 
                case "$todo" in 
                case "${1-}" in 
                case "${1-}" in 
                case "${1-}" in 
                case "${1}" in 
                case "${1}" in 
                case "${1}" in 
                case $prev in 
                case $prev in 
                cat
                cat
                clear)
                command rm -f "${NVM_DIR}/current" && ln -s "${NVM_VERSION_DIR}" "${NVM_DIR}/current";
                command sha256 -q "${FILE}" | command awk '{print $1}';
                compopt -o nospace;
                config+=("$f");
                configfile=$OPTARG
                cspec=${cspec#complete};
                cspec=${cspec%%$compcmd};
                cur="${cur#"${words[i]}"}";
                cur="${cur:1}";
                dashoptions="--save $dashoptions";
                dashoptions="--save $dashoptions";
                dashoptions="-c --crash-file $dashoptions";
                dashoptions="-f --file-bug $dashoptions";
                dashoptions="-s --symptom $dashoptions";
                dashoptions="-u --update $dashoptions";
                dashoptions="-w --window $dashoptions";
                dashoptions="-w --window $dashoptions";
                dir)
                do
                do
                do
                do
                done );
                done < "$i";
                done;
                done;
                done;
                done;
                done;
                echo "bash_completion: $FUNCNAME: $1: invalid option" 1>&2;
                echo "bash_completion: $FUNCNAME: \`${!OPTIND}':" "unknown argument" 1>&2;
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                else
                errx=$OPTARG
                esac
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                esac;
                exclude+=$OPTARG
                exclude+==
                exclude=$OPTARG
                export MANPATH;
                export PATH="${NEWPATH}";
                fi
                fi
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                for ((n=1; n <= n_stop; n++))
                for LINK in ${LINKS};
                for j in "$@";
                for tool in ${ADD_TEST_TOOLS};
                func=${func%% *};
                git diff --no-ext-diff --cached --quiet || i="+";
                git diff --no-ext-diff --quiet || w="*";
                greadlink -f "$(type -P "$1")";
                h="?";
                hash -r;
                i="$HOME/.ssh/$i";
                i="/etc/ssh/$i";
                i=${BASH_REMATCH[1]}${BASH_REMATCH[3]};
                if ! __git_eread "$g/HEAD" head; then
                if ! nvm_die_on_prefix "${NVM_DELETE_PREFIX}" "${NVM_USE_CMD}" "${NVM_VERSION_DIR}"; then
                if ! nvm_ensure_version_installed "${VERSION}"; then
                if ! nvm_has_system_node && ! nvm_has_system_iojs; then
                if ! nvm_is_version_installed "${VERSION}"; then
                if [ "$head" = "$b" ]; then
                if [ "${LTS-}" = '*' ]; then
                if [ "${MOD}" -eq 1 ]; then
                if [ "${NUM_VERSION_GROUPS}" = "2" ] || [ "${NUM_VERSION_GROUPS}" = "1" ]; then
                if [ "${NVM_HAS_COLORS-}" = '1' ]; then
                if [ "${NVM_IOJS}" = true ]; then
                if [ "${NVM_LTS-}" = '*' ]; then
                if [ "${NVM_SILENT:-0}" -eq 1 ]; then
                if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                if [ "${NVM_SILENT:-0}" -ne 1 ]; then
                if [ "${NVM_UPGRADE_NPM}" = 1 ]; then
                if [ "${REINSTALL_PACKAGES_FROM-}" = 'N/A' ]; then
                if [ "${TARGET}" != '--' ]; then
                if [ "${VERSION:-N/A}" = 'N/A' ]; then
                if [ "${VERSION}" = "v0.6.21-pre" ]; then
                if [ "${VERSION}" = '∞' ] || [ "${VERSION}" = 'N/A' ]; then
                if [ "${VERSION}" = '∞' ]; then
                if [ "${provided_version}" != 'system' ]; then
                if [ "_${LTS-}" = '_*' ]; then
                if [ "_${MANPATH}" = "_${NEWPATH}" ]; then
                if [ "_${NODE_PATH}" != "_${NEWPATH}" ]; then
                if [ "_${NVM_OS}" = "_freebsd" ]; then
                if [ "_${VERSION}" = "_∞" ]; then
                if [ $# -gt 0 ]; then
                if [ $EXIT_CODE -ne 0 ]; then
                if [ $EXIT_CODE -ne 0 ]; then
                if [ $NVM_IS_0_9 -eq 0 ] && [ $NVM_IS_0_6 -eq 0 ]; then
                if [ $nobinary -eq 1 ]; then
                if [ $nobinary -ne 1 ] && nvm_binary_available "${VERSION}"; then
                if [ -f "$g/rebase-apply/applying" ]; then
                if [ -n "${ALIAS-}" ]; then
                if [ -n "${LTS-}" ]; then
                if [ -n "${LTS-}" ]; then
                if [ -n "${NVM_NO_COLORS-}" ]; then
                if [ -n "${NVM_RC_VERSION-}" ]; then
                if [ -n "${NVM_RC_VERSION}" ]; then
                if [ -n "${PROVIDED_VERSION}" ]; then
                if [ -n "${REINSTALL_PACKAGES_FROM-}" ] && [ "_${REINSTALL_PACKAGES_FROM}" != "_N/A" ]; then
                if [ -n "${VERSION}" ]; then
                if [ -n "${provided_version}" ]; then
                if [ -n "${provided_version}" ]; then
                if [ -r "/etc/issue" ]; then
                if [ -z "$short_sha" ] && [ -z "$i" ]; then
                if [ -z "${MANPATH-}" ]; then
                if [ -z "${NVM_NO_COLORS-}" ] && nvm_has_colors; then
                if [ -z "${PROVIDED_VERSION-}" ]; then
                if [ -z "${SKIP_DEFAULT_PACKAGES-}" ] && [ -n "${DEFAULT_PACKAGES-}" ]; then
                if [[ "$i" -lt "$cword" ]]; then
                if [[ "$i" == *key_22_$cur*.pub && -r "$i" ]]; then
                if [[ "svn+git" = "$upstream_type" ]]; then
                if [[ $1 == -u ]]; then
                if [[ $1 == -u ]]; then
                if [[ $line =~ ^(.*[[:space:]])COMMAND([[:space:]]|$) ]]; then
                if [[ $line =~ ^[[(](.+)[])]$ ]]; then
                if [[ ${#COMP_WORDS[@]} -ge 2 ]]; then
                if [[ -z "$svn_upstream" ]]; then
                if [[ -z "${GIT_PS1_SHOWUPSTREAM}" ]]; then
                if __git_sequencer_status; then
                if nvm use "${VERSION}"; then
                if nvm_has "${tool}"; then
                if nvm_has_non_aliased "gsha256sum"; then
                if nvm_has_non_aliased 'gsha256sum'; then
                if nvm_has_system_iojs > /dev/null 2>&1 || nvm_has_system_node > /dev/null 2>&1; then
                if nvm_has_system_iojs || nvm_has_system_node; then
                if nvm_has_system_node && nvm deactivate "${NVM_SILENT_ARG-}" > /dev/null 2>&1; then
                if nvm_has_system_node; then
                if nvm_is_iojs_version "${VERSION}"; then
                if nvm_is_iojs_version "${VERSION}"; then
                if nvm_is_version_installed "${VERSION}"; then
                if nvm_version_greater 0.2.3 "${VERSION}"; then
                if nvm_version_greater_than_or_equal_to "${NPM_VERSION}" 2.0.0 && nvm_version_greater 3.0.0 "${NPM_VERSION}"; then
                if type "${COMMAND}" | nvm_grep -q "^${COMMAND} is \\/"; then
                if type -p readlink > /dev/null; then
                inx=$OPTARG
                ipv4=1
                ipv6=1
                j+="/";
                j=${BASH_REMATCH[2]};
                legacy=1
                line=${line#*"${COMP_WORDS[$i]}"};
                line=${line%% *};
                line=${line:$i};
                local BLACK_INFO;
                local BLUE_INFO;
                local CYAN_INFO;
                local GREEN_INFO;
                local GREY_WHITE_INFO;
                local IFS='
                local INITIAL_COLOR_INFO;
                local LTS_MSG;
                local MAGENTA_INFO;
                local NUM_VERSION_GROUPS;
                local NVM_IOJS_PREFIX;
                local NVM_METHOD_PREFERENCE;
                local NVM_NODE_PREFIX;
                local NVM_TOOL_VERSION;
                local NVM_USE_CMD;
                local RED_INFO;
                local REMOTE_CMD;
                local VERSION;
                local VERSION_PATH;
                local YELLOW_INFO;
                local func=${cspec#*-F };
                local head="";
                local mycur="${cur#*:}";
                local n_stop="${#svn_remote[@]}";
                local new_size=${#cur};
                local old_size=${#cur};
                local opt;
                lts/*)
                lts/*)
                lts/*)
                name=1
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm --help 1>&2;
                nvm install > /dev/null;
                nvm unalias "$(command basename "${ALIAS}")";
                nvm unalias "${ALIAS}";
                nvm use --silent "${NVM_CURRENT}" > /dev/null;
                nvm_download -L https://npmjs.org/install.sh -o - | clean=yes sh;
                nvm_echo "  - default (built-in) aliases: ${NVM_NODE_PREFIX}, stable, unstable, ${NVM_IOJS_PREFIX}, system";
                nvm_echo "$(nvm_version_dir new)/${VERSION}";
                nvm_echo "$(nvm_version_dir old)/${VERSION}";
                nvm_echo "${1-}" | command sed -e "s#${NVM_DIR}/[^/]*${2-}[^:]*#${3-}${2-}#" -e "s#${NVM_DIR}/versions/[^/]*/[^/]*${2-}[^:]*#${3-}${2-}#";
                nvm_echo "${3-}${2-}:${1-}";
                nvm_echo "${ALIAS}"
                nvm_echo "${INSTALLS}" | command xargs npm install -g --quiet;
                nvm_echo "${LTS_ALIAS}";
                nvm_echo "${NVM_DIR}";
                nvm_echo "${NVM_USE_OUTPUT}";
                nvm_echo "No installed global packages found...";
                nvm_echo "No linked global packages found...";
                nvm_echo "Node Version Manager (v${NVM_VERSION})";
                nvm_echo '                                               Color codes:';
                nvm_echo '                                               Initial colors are:';
                nvm_echo '    --alias=<name>                            After installing, set the alias specified to the version specified. (same as: nvm alias <name> <version>)';
                nvm_echo '    --default                                 After installing, set default alias to the version specified. (same as: nvm alias default <version>)';
                nvm_echo '    --latest-npm                              After installing, attempt to upgrade to the latest working npm on the given node version';
                nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.';
                nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.';
                nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.';
                nvm_echo '    --lts                                     When installing, only select from LTS (long-term support) versions';
                nvm_echo '    --lts                                     When listing, only select from LTS (long-term support) versions';
                nvm_echo '    --lts                                     When listing, only show LTS (long-term support) versions';
                nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.';
                nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.';
                nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.';
                nvm_echo '    --lts=<LTS name>                          When installing, only select from versions for a specific LTS line';
                nvm_echo '    --lts=<LTS name>                          When listing, only select from versions for a specific LTS line';
                nvm_echo '    --lts=<LTS name>                          When listing, only show versions for a specific LTS line';
                nvm_echo '    --no-alias                                Suppress `nvm alias` output';
                nvm_echo '    --no-colors                               Suppress colored output';
                nvm_echo '    --no-colors                               Suppress colored output';
                nvm_echo '    --no-colors                               Suppress colored output';
                nvm_echo '    --no-colors                               Suppress colored output';
                nvm_echo '    --no-progress                             Disable the progress bar on any downloads';
                nvm_echo '    --reinstall-packages-from=<version>       When installing, reinstall packages installed in <node|iojs|node version number>';
                nvm_echo '    --silent                                  Silences stdout/stderr output when a version is omitted';
                nvm_echo '    --silent                                  Silences stdout/stderr output';
                nvm_echo '    --silent                                  Silences stdout/stderr output';
                nvm_echo '    --silent                                  Silences stdout/stderr output';
                nvm_echo '    --silent                                  Silences stdout/stderr output';
                nvm_echo '    --skip-default-packages                   When installing, skip the default-packages file if it exists';
                nvm_echo '    -b                                        Skip source download, install from binary only.';
                nvm_echo '    -s                                        Skip binary download, install from source only.';
                nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm exec`:';
                nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm install`:';
                nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm run`:';
                nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm use`:';
                nvm_echo '  - custom aliases you define with `nvm alias foo`';
                nvm_echo '  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)';
                nvm_echo '  nvm --help                                  Show this message';
                nvm_echo '  nvm --version                               Print out the installed version of nvm';
                nvm_echo '  nvm alias <name> <version>                  Set an alias named <name> pointing to <version>';
                nvm_echo '  nvm alias [<pattern>]                       Show all aliases beginning with <pattern>';
                nvm_echo '  nvm alias default 8.1.0               Set default node version on a shell';
                nvm_echo '  nvm alias default node                Always default to the latest available node version on a shell';
                nvm_echo '  nvm cache clear                             Empty cache directory for nvm';
                nvm_echo '  nvm cache dir                               Display path to the cache directory for nvm';
                nvm_echo '  nvm current                                 Display currently activated version of Node';
                nvm_echo '  nvm deactivate                              Undo effects of `nvm` on current shell';
                nvm_echo '  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3';
                nvm_echo '  nvm exec [<version>] [<command>]            Run <command> on <version>. Uses .nvmrc if available and version is omitted.';
                nvm_echo '  nvm install --lts                     Install the latest LTS version';
                nvm_echo '  nvm install 8.0.0                     Install a specific version number';
                nvm_echo '  nvm install [<version>]                     Download and install a <version>. Uses .nvmrc if available and version is omitted.';
                nvm_echo '  nvm install node                      Install the latest available version';
                nvm_echo '  nvm install-latest-npm                      Attempt to upgrade to the latest working `npm` on the current node version';
                nvm_echo '  nvm ls [<version>]                          List installed versions, matching a given <version> if provided';
                nvm_echo '  nvm ls-remote [<version>]                   List remote versions available for install, matching a given <version> if provided';
                nvm_echo '  nvm reinstall-packages <version>            Reinstall global `npm` packages contained in <version> to current version';
                nvm_echo '  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3';
                nvm_echo '  nvm run [<version>] [<args>]                Run `node` on <version> with <args> as arguments. Uses .nvmrc if available and version is omitted.';
                nvm_echo '  nvm set-colors [<color codes>]              Set five text colors using format "yMeBg". Available when supported.';
                nvm_echo '  nvm set-colors cgYmW                  Set text colors to cyan, green, bold yellow, magenta, and white';
                nvm_echo '  nvm unalias <name>                          Deletes the alias named <name>';
                nvm_echo '  nvm uninstall --lts                         Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.';
                nvm_echo '  nvm uninstall --lts=<LTS name>              Uninstall using automatic alias for provided LTS line, if available.';
                nvm_echo '  nvm uninstall <version>                     Uninstall a version';
                nvm_echo '  nvm unload                                  Unload `nvm` from shell';
                nvm_echo '  nvm use --lts                         Use the latest LTS version';
                nvm_echo '  nvm use 8.0                           Use the latest available 8.0.x release';
                nvm_echo '  nvm use [<version>]                         Modify PATH to use <version>. Uses .nvmrc if available and version is omitted.';
                nvm_echo '  nvm use node                          Use the latest version';
                nvm_echo '  nvm version <version>                       Resolve the given description to a single local version';
                nvm_echo '  nvm version-remote <version>                Resolve the given description to a single remote version';
                nvm_echo '  nvm which [current | <version>]             Display path to installed node version. Uses .nvmrc if available and version is omitted.';
                nvm_echo '  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)';
                nvm_echo ' Any options that produce colorized output should respect the `--no-colors` option.';
                nvm_echo '* `npm` v1.x needs to first jump to `npm` v1.4.28 to be able to upgrade further';
                nvm_echo '* `npm` v5 and higher do not work on `node` versions below v4.0.0';
                nvm_echo 'Example:';
                nvm_echo 'N/A';
                nvm_echo 'Note: <version> refers to any version-like string nvm understands. This includes:';
                nvm_echo 'Note:';
                nvm_echo 'Usage:';
                nvm_echo 'sha256';
                nvm_echo 'system';
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo;
                nvm_echo_with_colors "                                                  ${INITIAL_COLOR_INFO}";
                nvm_echo_with_colors "                                                ${BLACK_INFO}";
                nvm_echo_with_colors "                                                ${BLUE_INFO}";
                nvm_echo_with_colors "                                                ${CYAN_INFO}";
                nvm_echo_with_colors "                                                ${GREEN_INFO}";
                nvm_echo_with_colors "                                                ${GREY_WHITE_INFO}";
                nvm_echo_with_colors "                                                ${MAGENTA_INFO}";
                nvm_echo_with_colors "                                                ${RED_INFO}";
                nvm_echo_with_colors "                                                ${YELLOW_INFO}";
                nvm_ensure_version_installed "${provided_version}";
                nvm_ensure_version_prefix "${ALIAS}"
                nvm_err "  chmod -R u+w \"$(nvm_sanitize_path "${VERSION_PATH}")\"";
                nvm_err "  chown -R $(whoami) \"$(nvm_sanitize_path "${VERSION_PATH}")\"";
                nvm_err "${FILE}";
                nvm_err "${NVM_DEBUG_COMMAND}: $(nvm_sanitize_path "${NVM_DEBUG_OUTPUT}")";
                nvm_err "${VERSION} is already installed.";
                nvm_err "${VERSION} version is not installed...";
                nvm_err "Alias ${1-} doesn't exist!";
                nvm_err "Invalid color index, ${1-}";
                nvm_err "Invalid color index, ${1-}";
                nvm_err "OS version: ${OS_VERSION}";
                nvm_err "Version '${provided_version}' ${LTS_MSG-}not found - try \`${REMOTE_CMD}\` to browse available versions.";
                nvm_err "You can't reinstall global packages from the same version of node you're installing.";
                nvm_err "\$TERM_PROGRAM: ${TERM_PROGRAM}";
                nvm_err "curl: $(nvm_command_info curl), $(command curl -V | command head -n 1)";
                nvm_err "curl: not found";
                nvm_err "file is not writable or self-owned: $(nvm_sanitize_path "$FILE")";
                nvm_err "wget: $(nvm_command_info wget), $(command wget -V | command head -n 1)";
                nvm_err "wget: not found";
                nvm_err '** $NVM_INSTALL_THIRD_PARTY_HOOK env var set; dispatching to third-party installation method **';
                nvm_err 'Aliases in subdirectories are not supported.';
                nvm_err 'Can not reinstall packages from the current version of node.';
                nvm_err 'Cannot uninstall, incorrect permissions on installation folder.';
                nvm_err 'Computing checksum with sha256 -q';
                nvm_err 'Invalid auto mode supplied.';
                nvm_err 'System version of node not found.';
                nvm_err 'This is usually caused by running `npm install -g` as root. Run the following commands as root to fix the permissions and then try again.';
                nvm_err '`--no-alias` is not supported when a pattern is provided.';
                nvm_err 'nvm needs curl or wget to proceed.';
                nvm_err 'unknown version dir';
                nvm_err;
                nvm_err_with_colors "\033[1;37mPlease pass in five \033[1;31mvalid color codes\033[1;37m. Choose from: rRgGbBcCyYmMkKeW\033[0m";
                option=$i;
                outx=$OPTARG
                p=""
                p="<"
                p="<>"
                p="="
                p=">"
                prefix=$OPTARG
                printf "%s" "${cur:0:$index}";
                printf "%s" "${words[cword]}";
                printf %d "${1#-a}" &> /dev/null || { 
                printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}";
                printf -v $2 %q "$1";
                printf -v $2 \~%q "${1:1}";
                procs+=($line);
                provided_version="$1";
                provided_version="lts/${NVM_LTS:-*}";
                r="|MERGING";
                r="|REBASE";
                ref="$2[$j]";
                return "$?";
                return $?;
                return $?;
                return $EXIT_CODE;
                return $EXIT_CODE;
                return $EXIT_CODE;
                return 0
                return 0;
                return 1
                return 1
                return 1
                return 1
                return 127;
                return 127;
                return 127;
                return 127;
                return 127;
                return 127;
                return 127;
                return 127;
                return 1;
                return 1;
                return 1;
                return 1;
                return 1;
                return 1;
                return 1;
                return 1;
                return 2;
                return 2;
                return 3;
                return 3;
                return 3;
                return 4;
                return 55;
                return;
                return;
                return;
                s="$";
                shift;
                shift;
                shift;
                shift;
                shift;
                shift;
                shift;
                shift;
                soft tar text tokens troff' -- "$cur"));
                split=false;
                suffix=':'
                svn_remote[$((${#svn_remote[@]} + 1))]="$value";
                svn_upstream=${svn_upstream%@*};
                svn_upstream=${svn_upstream[${#svn_upstream[@]} - 2]};
                svn_url_pattern="$svn_url_pattern\\|$value";
                syms="$syms ${FILE%.py}";
                u="%${ZSH_VERSION+%}";
                unset NVM_RC_VERSION;
                unset NVM_RC_VERSION;
                unset NVM_TOOL_VERSION;
                unset __git_ps1_upstream_name;
                upstream=""
                upstream="$upstream ${__git_ps1_upstream_name}";
                upstream="$upstream \${__git_ps1_upstream_name}";
                upstream="|u+${count#*	}-${count%	*}"
                upstream="|u+${count#0	}"
                upstream="|u-${count%	0}"
                upstream="|u="
                upstream_type="$option"
                upstream_type=svn+git
                vcur=$OPTARG
                vcur=cur
                vcword=$OPTARG
                vcword=cword
                verbose=1
                version_not_provided=1;
                vprev=$OPTARG
                vprev=prev
                vwords=$OPTARG
                vwords=words
                while [[ "${#cur}" -ge ${#words[i]} && "${cur:0:${#words[i]}}" != "${words[i]}" ]]; do
                while [[ $cspec == *" -o "* ]]; do
                while read -ra tmpkh; do
                xspec=$errx
                xspec=$inx
                xspec=$outx
                }
                }
                };
                };
                };
             $([[ -d /etc/fs ]] && command ls /etc/fs)";
             $(awk '! /\*/ { print $NF }' /etc/filesystems 2>/dev/null)";
             $(awk '/^[ \t]*[^#]/ { print $3 }' /etc/mnttab 2>/dev/null)
             $(awk '/^[ \t]*[^#]/ { print $4 }' /etc/vfstab 2>/dev/null)
             $(awk '{ print $1 }' /etc/dfs/fstypes 2>/dev/null)
            "")
            "")
            "$(nvm_iojs_prefix)")
            "${NVM_IOJS_PREFIX}-" | "${NVM_NODE_PREFIX}-" | "system")
            "0	"*)
            "0	"*)
            "0	0")
            "0	0")
            $NVM_NPM_CMD install -g npm@4.5;
            $reset;
            ${sysvdirs[0]}/${prev##*/} 2>/dev/null` start stop' -- "$cur"));
            '-h' | 'help' | '--help')
            '∞' | "${NVM_IOJS_PREFIX}" | "${NVM_IOJS_PREFIX}-" | "${NVM_NODE_PREFIX}")
            (( args++ ));
            (( i++ ));
            ((COMP_POINT--));
            *"	0")
            *"	0")
            *'<'*)
            *'>'*)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            -)
            -)
            -*)
            --)
            ---*)
            --?*)
            --install)
            --no-use)
            -?*)
            -a*)
            -ne "s/^.*\(U\|msg_u\)sage.*{\(.*\)}.*$/\2/p" \
            -v)
            /usr/share/command-not-found/command-not-found -- "$1";
            1)
            1)
            2'>'*)
            2)
            2)
            3)
            3)
            4)
            4)
            4)
            5)
            5)
            6)
            6)
            6)
            :;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ADDITIONAL_PARAMETERS="--without-snapshot ${ADDITIONAL_PARAMETERS}";
            ADDITIONAL_PARAMETERS='';
            ADDITIONAL_PARAMETERS='--without-snapshot';
            ADD_TEST_TOOLS="sed cut basename rm mkdir xargs";
            ALIAS="∞";
            ALIAS='--';
            ALIAS_FORMAT="\033[${CURRENT_COLOR}%s\033[0m";
            ALIAS_FORMAT="\033[${LTS_COLOR}%s\033[0m";
            ARGS=$(nvm_echo "$@" | command sed -e 's/--progress-bar /--progress=bar /'                             -e 's/--compressed //'                             -e 's/--fail //'                             -e 's/-L //'                             -e 's/-I /--server-response /'                             -e 's/-s /-q /'                             -e 's/-sS /-nv /'                             -e 's/-o /-O /'                             -e 's/-C - /-c /');
            CACHE_DIR="$(nvm_cache_dir)";
            COMPREPLY+=($(compgen -A variable -P '$' -- "${BASH_REMATCH[3]}"));
            COMPREPLY+=($(compgen -W '$(printf %s\\n "${!'${BASH_REMATCH[2]}'[@]}")'             -P "${BASH_REMATCH[1]}${BASH_REMATCH[2]}[" -S ']}' -- "${BASH_REMATCH[3]}"));
            COMPREPLY=($( apt-cache pkgnames $cur 2> /dev/null ))
            COMPREPLY=($( compgen -G "${cur}*.apport"
            COMPREPLY=($( compgen -G "${cur}*.apport"
            COMPREPLY=($( compgen -W "$(_apport_symptoms)" -- $cur))
            COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
            COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
            COMPREPLY=($( compgen -W "$param $(_apport_symptoms)" -- $cur))
            COMPREPLY=($( compgen -W "-p --package --tag" -- $cur))
            COMPREPLY=($( compgen -o default -G "$cur*" ))
            COMPREPLY=($( compgen -o default -G "$cur*" ))
            COMPREPLY=($(compgen -P "$prefix" -W "${COMPREPLY[@]}"));
            COMPREPLY=($(compgen -W "$(printf '%s\n'             /etc/sysconfig/network/ifcfg-* |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
            COMPREPLY=($(compgen -W '$(cut -d: -f3 /etc/group)' -- "$cur"));
            COMPREPLY=($(compgen -W '$(cut -d: -f3 /etc/passwd)' -- "$cur"));
            COMPREPLY=($(compgen -W '$(perl -e '"'"'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'"'"')' -- "$cur"));
            COMPREPLY=($(compgen -W '$(perl -e '"'"'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'"'"')' -- "$cur"));
            COMPREPLY=($(compgen -W '${COMPREPLY[@]}' -- "$cur"));
            COMPREPLY=($(compgen -W 'apptype ascii cdf compress elf encoding
            COMPREPLY[$i]=${COMPREPLY[$i]#"$colon_word"};
            COMPREPLY[0]="${i}/";
            COMPREPLY[i]=$prefix$user${COMPREPLY[i]}$suffix;
            COMPREPLY[k++]=${j#$i/};
            COMPRESSION='tar.xz';
            COMP_LINE=${COMP_LINE:1};
            CURL_COMPRESSED_FLAG="--compressed";
            CURL_COMPRESSED_FLAG="--compressed";
            DEFAULT_PACKAGES="${DEFAULT_PACKAGES}${line} ";
            DEST_FORMAT="\033[${CURRENT_COLOR}%s\033[0m";
            DEST_FORMAT="\033[${LTS_COLOR}%s\033[0m";
            EXIT_CODE="$?";
            EXIT_CODE="$?";
            EXIT_CODE="$?";
            EXIT_CODE=$?;
            EXIT_CODE=$?;
            EXIT_CODE=$?;
            EXIT_CODE=$?;
            EXIT_CODE=-1;
            F)
            FLAVOR="${1}"
            FLAVOR="${1}"
            FLAVOR="${1}"
            FLAVOR="${1}"
            FLAVOR="${1}"
            HOST_ARCH="$(command uname -m)";
            HOST_ARCH=$(isainfo -n);
            HOST_ARCH=$(nvm_echo "${HOST_ARCH}" | command tail -1);
            HOST_ARCH=ppc64;
            IFS="${DEFAULT_IFS}" nvm "$@";
            IFS='
            IFS=' ';
            INFO="$(which "${COMMAND}") ($(type "${COMMAND}" | command awk '{ $1=$2=$3=$4="" ;print }' | command sed -e 's/^\ *//g' -Ee "s/\`|'//g"))";
            INSTALLS="${NPMLIST%% //// *}";
            KIND="${2}"
            KIND="${2}"
            LAST_TWO=$($NVM_COMMAND | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2 | uniq)
            LINKS="${NPMLIST##* //// }";
            LTS_ALIAS="$(NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_LTS=true nvm_print_alias_path "${NVM_ALIAS_DIR}" "${ALIAS_PATH}")";
            LTS_ALIAS="${LTS_ALIAS_LINE%% *}";
            LTS_VERSION="${LTS_ALIAS_LINE#* }";
            MAKE_CXX="CC=${CC:-cc} CXX=${CXX:-c++}"
            MAKE_CXX="CC=${CC:-cc} CXX=${CXX:-c++}"
            MAKE_CXX="CC=${CC:-cc} CXX=${CXX:-c++}";
            MOD="$(awk 'BEGIN { print int(ARGV[1] / 1000000) % 2 ; exit(0) }' "${NORMALIZED_VERSION}")";
            NEWLINE=" \033[${DEFAULT_COLOR}(default)\033[0m\n";
            NEWPATH="$(nvm_strip_path "${PATH}" "/bin")";
            NODE_OR_IOJS="io.js";
            NODE_VERSION="${VERSION}" "${NVM_DIR}/nvm-exec" "$@"
            NODE_VERSION='';
            NPMLIST="$(nvm_npm_global_modules "${VERSION}")";
            NVM_ADD_PREFIX_COMMAND="nvm_add_iojs_prefix";
            NVM_ALIAS_DIR="$(nvm_alias_path)";
            NVM_ALIAS_DIR="$(nvm_alias_path)";
            NVM_ALIAS_EXISTS=0;
            NVM_ALIAS_ORIGINAL="$(nvm_alias "${1}")";
            NVM_ARCH="${HOST_ARCH}"
            NVM_ARCH="arm-pi";
            NVM_ARCH="arm64"
            NVM_ARCH="x64"
            NVM_ARCH="x86"
            NVM_ARCH=x64;
            NVM_COMMAND="nvm_ls_remote";
            NVM_COMMAND="nvm_ls_remote_iojs";
            NVM_CONFIG_VALUE="$(cd "$NVM_CONFIG_VALUE" 2>/dev/null && pwd)";
            NVM_CPU_CORES="$(nvm_grep -c -E '^processor.+: [0-9]+' /proc/cpuinfo)"
            NVM_CPU_CORES="$(pmcycles -m | wc -l)"
            NVM_CPU_CORES="$(psrinfo | wc -l)"
            NVM_CPU_CORES="$(sysctl -n hw.ncpu)"
            NVM_CURRENT="$(nvm_ls_current)";
            NVM_CURRENT="$(nvm_ls_current)";
            NVM_DELETE_PREFIX=0;
            NVM_DIRS_TO_SEARCH1="${NVM_VERSION_DIR_IOJS}";
            NVM_DIRS_TO_SEARCH1='';
            NVM_DIRS_TO_SEARCH2="${NVM_DIRS_TO_SEARCH1}";
            NVM_DIRS_TO_SEARCH3="${NVM_DIRS_TO_SEARCH2}";
            NVM_FLAVOR="${NVM_IOJS_PREFIX}";
            NVM_FLAVOR="${NVM_NODE_PREFIX}";
            NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
            NVM_IOJS_VERSION="$(${NVM_COMMAND})" && :;
            NVM_LATEST_URL="$(wget -q http://latest.nvm.sh --server-response -O /dev/null 2>&1 | command awk '/^  Location: /{DEST=$2} END{ print DEST }')";
            NVM_LS_EXIT_CODE=$?;
            NVM_LS_OUTPUT=$(nvm_ls "${PATTERN-}");
            NVM_MAKE_JOBS=$((NVM_CPU_CORES - 1));
            NVM_MAKE_JOBS=1;
            NVM_NODE_PREFIX="$(nvm_node_prefix)";
            NVM_NO_COLORS="${NVM_NO_COLORS-}" nvm_print_versions "${NVM_LS_OUTPUT}";
            NVM_NO_COLORS="${NVM_NO_COLORS-}" nvm_print_versions "N/A";
            NVM_OS="$(nvm_get_os)";
            NVM_OS=aix
            NVM_OS=darwin
            NVM_OS=freebsd
            NVM_OS=linux
            NVM_OS=openbsd
            NVM_OS=sunos
            NVM_OS=win
            NVM_OUTPUT="$(NVM_LTS="${NVM_LTS-}" nvm_remote_versions "${PATTERN}" &&:)";
            NVM_PATTERN_STARTS_WITH_V=false
            NVM_PATTERN_STARTS_WITH_V=true
            NVM_UPGRADE_NPM=0;
            NVM_USE_OUTPUT='';
            NVM_VERSION_DIR="$(nvm_version_path "${VERSION}")";
            NVM_VERSION_DIR="$(nvm_version_path "${VERSION}")";
            NVM_VERSION_ONLY=true NVM_LTS="${NVM_LTS-}" nvm_remote_version "${PATTERN:-node}"
            PATH="$(nvm_change_path "${PATH}" "/bin" "${NVM_VERSION_DIR}")";
            PATTERN="$(nvm_ensure_version_prefix "$(nvm_strip_iojs_prefix "${PATTERN}")")";
            PATTERN="$(nvm_ensure_version_prefix "${PATTERN}")"
            PATTERN="$(nvm_ensure_version_prefix "${PATTERN}")";
            PATTERN="$(nvm_ensure_version_prefix "${PATTERN}")";
            PATTERN="$(nvm_strip_iojs_prefix "${PATTERN}")";
            PATTERN="${1-}";
            PATTERN="${PATTERN}-"
            PATTERN=".*";
            PATTERN="stable"
            PATTERN='v';
            PREFIX="$(nvm_iojs_prefix)-"
            PREFIX=''
            PREFIXED_VERSION="$(nvm_ensure_version_prefix "${PROVIDED_VERSION}")";
            PROVIDED_VERSION="${1-}";
            PS1="$ps1pc_start$ps1pc_end"
            SEARCH_PATTERN="$(nvm_echo "${PATTERN}" | command sed 's#\.#\\\.#g;')";
            SEARCH_PATTERN='.*';
            SORT_COMMAND='command sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n'
            STABLE="$MINOR";
            TARGET='--';
            TEST_TOOLS="git grep awk";
            VERSION="$(NVM_VERSION_ONLY=true NVM_LTS="${LTS-}" nvm_remote_version "${provided_version}")";
            VERSION="$(nvm_strip_iojs_prefix "${1-}")";
            VERSIONS="$(command find "${NVM_DIRS_TO_SEARCH1}"/* "${NVM_DIRS_TO_SEARCH2}"/* "${NVM_DIRS_TO_SEARCH3}"/* -name . -o -type d -prune -o -path "${PATTERN}*"         | command sed -e "
            VERSIONS="${PATTERN}";
            VERSIONS="${VERSIONS}$(command printf '\n%s' 'system')";
            VERSION_FORMAT="\033[${CURRENT_COLOR}%s\033[0m";
            VERSION_FORMAT='%s *';
            VERSION_PATH="$(nvm_version_path "${VERSION}")";
            [ "$(nvm_echo "${line}" | command cut -c1)" != "#" ] || continue;
            [ "$1" -eq "$1" ] 2> /dev/null
            [ -n "${line-}" ] || continue;
            [[ "$1" == *mkdir ]] && compopt -o nospace;
            [[ "$COMP_LINE" == "${COMP_WORDS[i]}"* ]] && break;
            [[ $i -le $cword ]] && (( cword -= skip ));
            [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
            [[ ${words[i]} == $redir ]] && skip=2 || skip=1;
            [[ -d $i ]] && khd+=("$i"/*pub);
            [[ -f "$compfile" ]] && . "$compfile" &> /dev/null && return 0;
            [[ -n $cspec ]] && compcmd=${cmd##*/};
            [[ -n $tmp ]] && printf '%s\n' $tmp
            [[ -n ${COMPREPLY[i]} ]] || unset -v COMPREPLY[i];
            [[ -r $i ]] && config+=("$i");
            [[ -r $i ]] && kh+=("$i");
            \\#${SEARCH_PATTERN}# !d;
            \\#^[^v]# d;
            \\#^versions\$# d;
            __git_eread "$g/rebase-apply/last" total;
            __git_eread "$g/rebase-apply/next" step;
            __git_ps1_upstream_name=$(git rev-parse 				--abbrev-ref "$upstream_type" 2>/dev/null);
            __ltrim_colon_completions "$cur";
            __nvm_alias
            __nvm_commands
            __nvm_installed_nodes
            _completion_loader $compcmd;
            _filedir
            _filedir -d;
            _filedir -d;
            _filedir;
            _filedir;
            _filedir;
            _filedir;
            _tilde "$cur" || eval COMPREPLY[0]=$(printf ~%q "${COMPREPLY[0]#\~}");
            a)
            alias)
            arg=${COMP_WORDS[i]};
            b="GIT_DIR!";
            bash.showupstream)
            break;
            break;
            break;
            break;
            c)
            c)
            c="BARE:";
            case "$cur" in 
            case "$cur" in 
            case "$cur" in 
            case "$cur" in 
            case "${1-}" in 
            case "${LTS}" in 
            case "${PATTERN-}" in 
            case "${PATTERN-}" in 
            case "${provided_version}" in 
            case $line in 
            case $option in 
            case ${argtype,,} in 
            command mkdir -p "${NVM_ALIAS_DIR}";
            command mkdir -p "${NVM_ALIAS_DIR}/lts";
            command printf -- "${FORMAT}${LTS_FORMAT}\\n" "${VERSION}" " ${LTS}";
            command printf -- "${FORMAT}\\n" "${VERSION}";
            command rm -f "${NVM_ALIAS_DIR}/${1}";
            command rm -f "${NVM_DIR}/v*" "$(nvm_version_dir)" 2> /dev/null;
            command rm -rf "${CACHE_DIR}/bin/${SLUG_BINARY}/files" "${CACHE_DIR}/src/${SLUG_SOURCE}/files" "${VERSION_PATH}" 2> /dev/null;
            command shasum -a 256 "${FILE}" | command awk '{print $1}';
            compcmd=${cmd##*/};
            compfile="$dir/$compfile";
            count="";
            count="$behind	$ahead";
            cspec=$(complete -p $compcmd 2>/dev/null);
            cspec=$(complete -p ${cmd##*/} 2>/dev/null);
            cur)
            cword)
            dashoptions="--save --tag";
            dashoptions="--save --tag";
            dashoptions="--tag";
            dashoptions='--tag';
            do
            do
            do
            do
            do
            do
            do
            do
            do
            done
            done)" -- "$cur"));
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
            e)
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            esac
            esac
            esac
            esac
            esac
            esac
            esac;
            esac;
            esac;
            esac;
            esac;
            esac;
            eval $1=\"\$2\";
            eval $1=\(\"\${@:2}\"\);
            eval wget $ARGS;
            export NVM_BIN="${NVM_VERSION_DIR}/bin";
            export NVM_INC="${NVM_VERSION_DIR}/include/node";
            export PATH;
            fi
            fi
            fi
            fi
            fi
            fi
            fi
            fi
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            for ((i = 0; i <= cword; ++i ))
            for ALIAS in $(nvm_grep -l "${VERSION}" "$(nvm_alias_path)/*" 2>/dev/null);
            for NVM_DEBUG_COMMAND in 'nvm current' 'which node' 'which iojs' 'which npm' 'npm config get prefix' 'npm root -g';
            for commit in $commits;
            for i in "${kh[@]}";
            for i in "${khd[@]}";
            for j in $i;
            for line in "${psout[@]}";
            for tool in ${TEST_TOOLS};
            git | svn)
            gitstring=$(printf -- "$printf_format" "$gitstring");
            has_checked_nvmrc=0;
            hash -r;
            i)
            i)
            if ! [ -e '/usr/lib/liblzma.so' ]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--crash-file.* || "${COMP_WORDS[*]}" =~ .*\ -c\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--file-bug.* || "${COMP_WORDS[*]}" =~ .*\ -f\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--save.* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--save.* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--symptom.* || "${COMP_WORDS[*]}" =~ .*\ -s\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--update.* || "${COMP_WORDS[*]}" =~ .*\ -u\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--window.* || "${COMP_WORDS[*]}" =~ .*\ -w\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--window.* || "${COMP_WORDS[*]}" =~ .*\ -w\ .* ]]; then
            if ! command which xz > /dev/null 2>&1; then
            if ! nvm_check_file_permissions "${FILE}"; then
            if ! nvm_check_file_permissions "${VERSION_PATH}"; then
            if ! nvm_has "curl" && ! nvm_has "wget"; then
            if ! nvm_is_version_installed "${VERSION}"; then
            if [ ! -f "${NVM_ALIAS_DIR}/${ALIAS_NAME}" ] && { 
            if [ "$(nvm_get_os)" = "darwin" ] && nvm_has sw_vers; then
            if [ "$EXIT_CODE" -eq 17 ]; then
            if [ "${1#*\/}" != "${1-}" ]; then
            if [ "${EXIT_CODE}" != "0" ]; then
            if [ "${EXIT_CODE}" != "0" ]; then
            if [ "${IFS}" != "${DEFAULT_IFS}" ]; then
            if [ "${MOD}" -eq 0 ]; then
            if [ "${NVM_HAS_COLORS-}" = '1' ]; then
            if [ "${NVM_LTS-}" != '' ]; then
            if [ "${NVM_SILENT:-0}" -ne 1 ]; then
            if [ "${NVM_SILENT:-0}" -ne 1 ]; then
            if [ "${NVM_SYMLINK_CURRENT-}" = true ]; then
            if [ "${PATTERN}" = "${NVM_NODE_PREFIX}-" ]; then
            if [ "${PATTERN}" = 'system' ]; then
            if [ "${PROVIDED_VERSION}" = "$(nvm_ls_current)" ] || [ "$(nvm_version "${PROVIDED_VERSION}" ||:)" = "$(nvm_ls_current)" ]; then
            if [ "${VERSION}" = "system" ]; then
            if [ "${VERSION}" = 'N/A' ]; then
            if [ "${VERSION}" = 'N/A' ]; then
            if [ "_$1" = "_local" ]; then
            if [ "_$1" = "_local" ]; then
            if [ "_$NVM_IOJS_VERSION" = "_N/A" ]; then
            if [ "_${EXIT_CODE}" = "_0" ]; then
            if [ "_${NVM_CURRENT}" = '_none' ] || [ "_${NVM_CURRENT}" = '_system' ]; then
            if [ "_${NVM_MODE}" != '_none' ]; then
            if [ "_${NVM_WHICH_DIR}" = "_old" ]; then
            if [ "_${PATH}" = "_${NEWPATH}" ]; then
            if [ "_${PROVIDED_VERSION}" = "_system" ]; then
            if [ "_${VERSION}" != "_system" ]; then
            if [ "_${VERSION}" = "_$(nvm_ls_current)" ]; then
            if [ "_${VERSION}" = "_N/A" ]; then
            if [ "_${VERSION}" = '_system' ]; then
            if [ "_${VERSION}" = '_system' ]; then
            if [ "darwin" != "$(nvm_get_os)" ] && [ "freebsd" != "$(nvm_get_os)" ]; then
            if [ $# -lt 1 ] && [ -z "${NVM_LTS-}" ]; then
            if [ $# -lt 1 ]; then
            if [ $# -ne 0 ]; then
            if [ $# -ne 1 ]; then
            if [ $# -ne 1 ]; then
            if [ $# -ne 1 ]; then
            if [ $EXIT_CODE -eq 0 ] && nvm_use_if_needed "${VERSION}" && nvm_install_npm_if_needed "${VERSION}"; then
            if [ $NVM_ALIAS_EXISTS -eq 0 ]; then
            if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
            if [ -e "$FILE" ] && [ ! -w "$FILE" ] && [ ! -O "$FILE" ]; then
            if [ -f "$g/MERGE_HEAD" ]; then
            if [ -f "$g/rebase-apply/rebasing" ]; then
            if [ -f "${NVM_ALIAS_DIR}/${1-}" ]; then
            if [ -h "$g/HEAD" ]; then
            if [ -n "${GIT_PS1_COMPRESSSPARSESTATE-}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
            if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] && [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
            if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] && git rev-parse --verify --quiet refs/stash > /dev/null; then
            if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] && [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] && git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' > /dev/null 2> /dev/null; then
            if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
            if [ -n "${INSTALLS}" ]; then
            if [ -n "${LINKS}" ]; then
            if [ -n "${LTS_ALIAS}" ]; then
            if [ -n "${MANPATH-}" ]; then
            if [ -n "${NODE_PATH-}" ]; then
            if [ -n "${NVM_DEBUG-}" ]; then
            if [ -n "${NVM_INSTALL_THIRD_PARTY_HOOK-}" ]; then
            if [ -n "${NVM_LTS-}" ]; then
            if [ -n "${NVM_LTS-}" ]; then
            if [ -n "${NVM_OUTPUT}" ]; then
            if [ -n "${NVM_USE_OUTPUT-}" ] && [ "${NVM_SILENT:-0}" -ne 1 ]; then
            if [ -n "${OS_VERSION}" ]; then
            if [ -n "${PATTERN-}" ] && [ -n "${NVM_NO_ALIAS-}" ]; then
            if [ -n "${PROVIDED_REINSTALL_PACKAGES_FROM-}" ] && [ "$(nvm_ensure_version_prefix "${PROVIDED_REINSTALL_PACKAGES_FROM}")" = "${VERSION}" ]; then
            if [ -n "${TERM_PROGRAM-}" ]; then
            if [ -r $f ]; then
            if [ -z "${NVM_LTS-}" ]; then
            if [ -z "${NVM_NO_ALIAS-}" ] && [ -z "${PATTERN-}" ]; then
            if [ -z "${SKIP_DEFAULT_PACKAGES-}" ]; then
            if [ -z "${TARGET}" ]; then
            if [ -z "${VERSION}" ]; then
            if [ -z "${VERSION}" ]; then
            if [ -z "${provided_version-}" ]; then
            if [ -z "${provided_version}" ]; then
            if [[ ! "$FILE" =~ ^_.* && -n $(egrep "^def run\s*\(.*\):" /usr/share/apport/symptoms/$FILE) ]]; then
            if [[ "$configfile" =~ ^\/etc\/ssh.* ]]; then
            if [[ "${COMP_WORDS[*]}" =~ .*\ -p.* || "${COMP_WORDS[*]}" =~ .*--package.* ]]; then
            if [[ "${words[cword]:0:${#cur}}" != "$cur" ]]; then
            if [[ $1 == -u ]]; then
            if [[ $1 == \~* ]]; then
            if [[ $cur == *:* ]]; then
            if [[ $cur =~ ^\$\{[#!]?[A-Za-z0-9_]*\[.*\]$ ]]; then
            if [[ $i -eq -1 ]]; then
            if [[ $i -lt $cword ]]; then
            if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
            if [[ ${#vars[@]} -eq 1 && -n $arrs ]]; then
            if [[ ${BASH_REMATCH[3]} == [@*] ]]; then
            if [[ ${cspec#* -F } != $cspec ]]; then
            if [[ ( -n $mark_symdirs && -h $j || -n $mark_dirs && ! -h $j ) && ! -d ${j#$i/} ]]; then
            if [[ -f /etc/pld-release ]]; then
            if [[ 0 -ne ${#svn_upstream[@]} ]]; then
            if __git_eread "$g/sequencer/todo" todo; then
            if nvm_echo "${1-}" | nvm_grep -Eq "(^|:)(/usr(/local)?)?${2-}:.*${NVM_DIR}/[^/]*${2-}" || nvm_echo "${1-}" | nvm_grep -Eq "(^|:)(/usr(/local)?)?${2-}:.*${NVM_DIR}/versions/[^/]*/[^/]*${2-}"; then
            if nvm_has "curl"; then
            if nvm_has "wget"; then
            if nvm_has manpath; then
            if nvm_has_non_aliased "sha256"; then
            if nvm_has_non_aliased 'sha256'; then
            if nvm_has_system_iojs; then
            if nvm_is_iojs_version "${VERSION}"; then
            if nvm_is_iojs_version "${VERSION}"; then
            if nvm_is_iojs_version "${VERSION}"; then
            if nvm_is_iojs_version "${VERSION}"; then
            if nvm_is_version_installed "$(nvm_add_iojs_prefix "${PATTERN}")"; then
            if nvm_is_version_installed "${VERSION}"; then
            if nvm_is_version_installed "${VERSION}"; then
            if nvm_rc_version > /dev/null 2>&1; then
            if nvm_resolve_local_alias "${PATTERN}"; then
            if nvm_tree_contains_path "${NVM_DIR}" "${NVM_LS_CURRENT_NODE_PATH}"; then
            if nvm_version_greater 0.12.0 "${VERSION}"; then
            if nvm_version_greater 4.0.0 "${NODE_VERSION}"; then
            if nvm_version_greater_than_or_equal_to "${NPM_VERSION}" 1.0.0 && nvm_version_greater 2.0.0 "${NPM_VERSION}"; then
            if nvm_version_greater_than_or_equal_to "${VERSION}" 0.2.0; then
            if type "${COMMAND}" | nvm_grep -q "^${COMMAND} is an alias for"; then
            if type -p greadlink > /dev/null; then
            ifconfig -a || ip link show
            ifconfig || ip link show up
            iwconfig
            legacy)
            line=${line#*"$match"};
            line=${line#*"${COMP_WORDS[i]}"};
            line=${line/"${BASH_REMATCH[0]}"/"${BASH_REMATCH[1]}"};
            local -a svn_upstream;
            local ALIAS;
            local ALIAS;
            local CACHE_DIR;
            local DEFAULT_PACKAGES;
            local EXIT_CODE;
            local EXIT_CODE;
            local EXIT_CODE;
            local EXIT_CODE;
            local EXIT_CODE;
            local EXIT_CODE;
            local FLAVOR;
            local IFS='
            local INSTALLS;
            local LINKS;
            local LTS;
            local LTS_ARG;
            local NEWPATH;
            local NPMLIST;
            local NVM_ALIAS_DIR;
            local NVM_ALIAS_DIR;
            local NVM_ALIAS_EXISTS;
            local NVM_ALIAS_ORIGINAL;
            local NVM_CURRENT;
            local NVM_DEBUG_OUTPUT;
            local NVM_DELETE_PREFIX;
            local NVM_IOJS;
            local NVM_IOJS_PREFIX;
            local NVM_IOJS_VERSION;
            local NVM_LS_EXIT_CODE;
            local NVM_LS_OUTPUT;
            local NVM_LTS;
            local NVM_LTS;
            local NVM_LTS;
            local NVM_LTS;
            local NVM_LTS;
            local NVM_NODE_PREFIX;
            local NVM_NO_ALIAS;
            local NVM_NO_COLORS;
            local NVM_NO_COLORS;
            local NVM_NO_COLORS;
            local NVM_OS;
            local NVM_OUTPUT;
            local NVM_SILENT;
            local NVM_SILENT;
            local NVM_SILENT;
            local NVM_SILENT;
            local NVM_SILENT;
            local NVM_SILENT_ARG;
            local NVM_SILENT_ARG;
            local NVM_SUCCESS_MSG;
            local NVM_UPGRADE_NPM;
            local NVM_USE_OUTPUT;
            local NVM_VERSION_DIR;
            local NVM_VERSION_DIR;
            local OS_VERSION;
            local PATTERN;
            local PATTERN;
            local PATTERN;
            local PATTERN;
            local PREFIXED_VERSION;
            local PROVIDED_REINSTALL_PACKAGES_FROM;
            local PROVIDED_VERSION;
            local PROVIDED_VERSION;
            local REINSTALL_PACKAGES_FROM;
            local SKIP_DEFAULT_PACKAGES;
            local SLUG_BINARY;
            local SLUG_SOURCE;
            local TARGET;
            local TEST_TOOLS ADD_TEST_TOOLS;
            local VERSION;
            local VERSION;
            local VERSION_PATH;
            local argtype=$(LC_ALL=C $1 --help 2>&1 | command sed -ne                 "s|.*$prev\[\{0,1\}=[<[]\{0,1\}\([-A-Za-z0-9_]\{1,\}\).*|\1|p");
            local arrs vars;
            local commit behind=0 ahead=0;
            local cur="$COMP_LINE";
            local has_checked_nvmrc;
            local i;
            local index="$COMP_POINT";
            local mycur="${cur#*[:]}";
            local nobinary;
            local noprogress;
            local nosource;
            local prefix;
            local provided_version;
            local provided_version;
            local provided_version;
            local provided_version;
            local version_not_provided;
            make='gmake'
            make='gmake';
            match=${BASH_REMATCH[0]};
            n)
            n)
            n='6'
            n='6\?'
            name)
            nobinary=0;
            noprogress=0;
            nosource=0;
            npm config --global --loglevel=warn delete globalconfig;
            npm config --global --loglevel=warn delete prefix;
            npm config --loglevel=warn delete globalconfig --userconfig="${NVM_NPM_BUILTIN_NPMRC}";
            npm config --loglevel=warn delete globalconfig --userconfig="${NVM_NPM_USER_NPMRC}";
            npm config --loglevel=warn delete globalconfig;
            npm config --loglevel=warn delete prefix --userconfig="${NVM_NPM_BUILTIN_NPMRC}";
            npm config --loglevel=warn delete prefix --userconfig="${NVM_NPM_USER_NPMRC}";
            npm config --loglevel=warn delete prefix;
            nvm --help 1>&2;
            nvm alias "${ALIAS}" "${provided_version}";
            nvm deactivate > /dev/null 2>&1;
            nvm deactivate > /dev/null 2>&1;
            nvm install "${VERSION}" > /dev/null;
            nvm_add_iojs_prefix "$(iojs --version 2>/dev/null)";
            nvm_echo "$(nvm_version_dir iojs)/$(nvm_strip_iojs_prefix "${VERSION}")";
            nvm_echo "${3-}${2-}:${1-}";
            nvm_echo "${FLAVOR}-${VERSION}";
            nvm_echo "${NVM_DIR}/versions/io.js";
            nvm_echo "${NVM_IOJS_ORG_MIRROR:-https://iojs.org/dist}"
            nvm_echo "${NVM_NODEJS_ORG_MIRROR:-https://nodejs.org/dist}"
            nvm_echo "${NVM_SUCCESS_MSG}";
            nvm_echo "${NVM_VERSION_DIR}/bin/node"
            nvm_echo "${TARBALL}";
            nvm_echo "${UNSTABLE:-"N/A"}";
            nvm_echo "Clang v3.5+ detected! CC or CXX not specified, will use Clang as C/C++ compiler!";
            nvm_echo "Deleted alias ${1} - restore it with \`nvm alias \"${1}\" \"${NVM_ALIAS_ORIGINAL}\"\`"
            nvm_echo "Detected node version ${NODE_VERSION}, npm version v${NPM_VERSION}";
            nvm_echo "Linking global packages from ${VERSION}...";
            nvm_echo "N/A";
            nvm_echo "Reinstalling global packages from ${VERSION}...";
            nvm_echo "Running with ${NVM_MAKE_JOBS} threads to speed up the build";
            nvm_echo "Setting colors to: ${INSTALLED_COLOR} ${LTS_AND_SYSTEM_COLOR} ${CURRENT_COLOR} ${NOT_INSTALLED_COLOR} ${DEFAULT_COLOR}";
            nvm_echo "WARNING: Colors may not display because they are not supported in this shell.";
            nvm_echo "lts/${RESULT}";
            nvm_echo '* `npm` v4.5.x is the last version that works on `node` versions < v1.1.0';
            nvm_echo '0.39.1'
            nvm_echo '0;30m'
            nvm_echo '0;31m'
            nvm_echo '0;32m'
            nvm_echo '0;33m'
            nvm_echo '0;34m'
            nvm_echo '0;35m'
            nvm_echo '0;36m'
            nvm_echo '0;37m'
            nvm_echo '1;30m'
            nvm_echo '1;31m'
            nvm_echo '1;32m'
            nvm_echo '1;33m'
            nvm_echo '1;34m'
            nvm_echo '1;35m'
            nvm_echo '1;36m'
            nvm_echo '1;37m'
            nvm_echo 'Number of CPU core(s) less than or equal to 2, running in single-threaded mode';
            nvm_echo 'nvm cache cleared.'
            nvm_echo 'sha-1'
            nvm_echo 'sha-256'
            nvm_echo 'shasum';
            nvm_echo 'stable';
            nvm_echo 'system'
            nvm_echo_with_colors "Setting colors to: \033[$(nvm_print_color_code "${INSTALLED_COLOR}") ${INSTALLED_COLOR}\033[$(nvm_print_color_code "${LTS_AND_SYSTEM_COLOR}") ${LTS_AND_SYSTEM_COLOR}\033[$(nvm_print_color_code "${CURRENT_COLOR}") ${CURRENT_COLOR}\033[$(nvm_print_color_code "${NOT_INSTALLED_COLOR}") ${NOT_INSTALLED_COLOR}\033[$(nvm_print_color_code "${DEFAULT_COLOR}") ${DEFAULT_COLOR}\033[0m";
            nvm_ensure_version_installed "${provided_version}";
            nvm_ensure_version_installed "${provided_version}";
            nvm_ensure_version_prefix "${IMPLICIT}";
            nvm_err "$1 is invalid for number of \`make\` jobs, must be a natural number";
            nvm_err "Checksums do not match: '${COMPUTED_SUM}' found, '${CHECKSUM}' expected.";
            nvm_err "Checksums match! Using existing downloaded archive $(nvm_sanitize_path "${TARBALL}")";
            nvm_err "N/A: version \"${PREFIXED_VERSION:-$PROVIDED_VERSION}\" is not yet installed.";
            nvm_err "N/A: version \"${PROVIDED_VERSION} -> ${VERSION}\" is not yet installed.";
            nvm_err "No .nvmrc file found";
            nvm_err "Only implicit aliases 'stable', 'unstable', '${NVM_IOJS_PREFIX}', and '${NVM_NODE_PREFIX}' are supported.";
            nvm_err "Run \`${NVM_COMMAND}\` to unset it.";
            nvm_err "Run \`${NVM_COMMAND}\` to unset it.";
            nvm_err "Run \`${NVM_COMMAND}\` to unset it.";
            nvm_err "Run \`${NVM_COMMAND}\` to unset it.";
            nvm_err "Run \`unset ${NVM_NPM_CONFIG_x_PREFIX_ENV}\` to unset it.";
            nvm_err "Warning: empty .nvmrc file found at \"${NVMRC_PATH}\"";
            nvm_err "Your builtin npmrc file ($(nvm_sanitize_path "${NVM_NPM_BUILTIN_NPMRC}"))";
            nvm_err "Your global npmrc file ($(nvm_sanitize_path "${NVM_NPM_GLOBAL_NPMRC}"))";
            nvm_err "Your project npmrc file ($(nvm_sanitize_path "${NVM_NPM_PROJECT_NPMRC}"))";
            nvm_err "Your user’s .npmrc file ($(nvm_sanitize_path "${NVM_NPM_USER_NPMRC}"))";
            nvm_err "\$NVM_IOJS_ORG_MIRROR: '${NVM_IOJS_ORG_MIRROR}'";
            nvm_err "\$NVM_NODEJS_ORG_MIRROR: '${NVM_NODEJS_ORG_MIRROR}'";
            nvm_err "\$PREFIX: '$(nvm_sanitize_path "${PREFIX}")'";
            nvm_err "\$SHELL: ${SHELL}";
            nvm_err "\$SHLVL: ${SHLVL-}";
            nvm_err "\${HOME}: ${HOME}";
            nvm_err "\${NPM_CONFIG_PREFIX}: '$(nvm_sanitize_path "${NPM_CONFIG_PREFIX}")'";
            nvm_err "\${NVM_DIR}: '$(nvm_sanitize_path "${NVM_DIR}")'";
            nvm_err "\${PATH}: $(nvm_sanitize_path "${PATH}")";
            nvm_err "checksum binary: '$(nvm_get_checksum_binary 2>/dev/null)'";
            nvm_err "nvm --version: v$(nvm --version)";
            nvm_err "nvm is not compatible with the \"${NVM_NPM_CONFIG_x_PREFIX_ENV}\" environment variable: currently set to \"${NVM_CONFIG_VALUE}\"";
            nvm_err "shell version: '$(${SHELL} --version | command head -n 1)'";
            nvm_err "uname -a: '$(command uname -a | command awk '{$2=""; print}' | command xargs)'";
            nvm_err "whoami: '$(whoami)'";
            nvm_err 'Computing checksum with shasum -a 256';
            nvm_err 'First argument "delete the prefix" must be zero or one';
            nvm_err 'Invalid color code';
            nvm_err 'Provided file to checksum does not exist.';
            nvm_err 'Provided file to checksum does not exist.';
            nvm_err 'That many LTS releases do not exist yet.';
            nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.';
            nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.';
            nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.';
            nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.';
            nvm_err 'invalid version number';
            nvm_err 'npm requires node v0.2.3 or higher';
            nvm_err 'nvm needs curl or wget to proceed.';
            nvm_err 'supported flavors: node, iojs';
            nvm_err 'supported flavors: node, iojs';
            nvm_err 'supported flavors: node, iojs';
            nvm_err 'supported flavors: node, iojs';
            nvm_err 'supported flavors: node, iojs';
            nvm_err 'supported kinds: binary, source';
            nvm_err 'supported kinds: binary, source';
            nvm_err 'unknown type of io.js release';
            nvm_err 'unknown type of node.js or io.js release';
            nvm_err 'unknown type of node.js release';
            nvm_get_checksum_binary;
            nvm_install_latest_npm
            nvm_iojs_version_has_solaris_binary "${VERSION}";
            nvm_is_zsh && setopt local_options shwordsplit;
            nvm_is_zsh && setopt local_options shwordsplit;
            nvm_is_zsh && setopt local_options shwordsplit;
            nvm_is_zsh && setopt local_options shwordsplit;
            nvm_make_alias "${LTS_ALIAS}" "${LTS_VERSION}" > /dev/null 2>&1;
            nvm_node_version_has_solaris_binary "${VERSION}";
            nvm_set_colors "${1-}";
            nvm_version "${1}"
            nvm_version "${NVM_IOJS_PREFIX}"
            nvm_version "${PROVIDED_VERSION}"
            nvm_version current
            nvm_version_greater_than_or_equal_to "${1}" "1.0.0"
            nvm_version_greater_than_or_equal_to "${1}" "2.3.2"
            nvm_version_greater_than_or_equal_to "${VERSION}" 0
            o)
            offset=$i;
            option=${BASH_REMATCH[1]};
            p)
            p)
            param="-P --pid -p --package -s --symptom";
            pcmode=yes;
            prefix=${cur%%*([^:])};
            prefix=${prefix//\\};
            prev)
            print $1, $10
            print $1, $10, "*"
            printf "%s" "${words[cword]}";
            printf "%s: command not found\n" "$1" 1>&2;
            printf '%s\n' $tmp
            printf -v "$2[i]" %s "${COMP_WORDS[i]}";
            printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}";
            printf -v $2 %s "${1:1}";
            printf -v gitstring -- "$printf_format" "$gitstring";
            printf_format="${1:-$printf_format}"
            printf_format="${3:-$printf_format}";
            provided_version="$1";
            provided_version="${1-}";
            ps1pc_end="$2";
            ps1pc_start="$1";
            r="|REVERTING";
            realpath "$(type -P "$1")";
            ref="$2[$j]";
            reset=$(shopt -po noglob);
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return "$EXIT_CODE";
            return $?
            return $?;
            return $EXIT_CODE
            return $EXIT_CODE
            return $EXIT_CODE
            return $NVM_LS_EXIT_CODE
            return $exit
            return ${#COMPREPLY[@]};
            return 0
            return 0
            return 0
            return 0
            return 0
            return 0;
            return 0;
            return 0;
            return 0;
            return 0;
            return 1
            return 1
            return 1
            return 1
            return 1
            return 1
            return 1
            return 1
            return 10;
            return 10;
            return 10;
            return 10;
            return 127
            return 127;
            return 1;
            return 1;
            return 1;
            return 1;
            return 2
            return 2
            return 2
            return 2;
            return 3
            return 3
            return 3;
            return 3;
            return 4
            return 4
            return 4
            return 4
            return 42
            return 4;
            s#${NVM_VERSION_DIR_IOJS}/#versions/${NVM_IOJS_PREFIX}/#;
            s#^${NVM_DIR}/##;
            s#^v#${NVM_NODE_PREFIX}/v#;
            s#^versions/##;
            s)
            set +a;
            set -a;
            set -o noglob;
            svn-remote.*.url)
            svn_upstream=($(git log --first-parent -1 					--grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null));
            tar='gtar';
            tar='tar';
            tar_compression_flag='J';
            toks+=($(compgen -f "${plusdirs[@]}" -- $quoted));
            unset -f nvm nvm_iojs_prefix nvm_node_prefix nvm_add_iojs_prefix nvm_strip_iojs_prefix nvm_is_iojs_version nvm_is_alias nvm_has_non_aliased nvm_ls_remote nvm_ls_remote_iojs nvm_ls_remote_index_tab nvm_ls nvm_remote_version nvm_remote_versions nvm_install_binary nvm_install_source nvm_clang_version nvm_get_mirror nvm_get_download_slug nvm_download_artifact nvm_install_npm_if_needed nvm_use_if_needed nvm_check_file_permissions nvm_print_versions nvm_compute_checksum nvm_get_checksum_binary nvm_get_checksum_alg nvm_get_checksum nvm_compare_checksum nvm_version nvm_rc_version nvm_match_version nvm_ensure_default_set nvm_get_arch nvm_get_os nvm_print_implicit_alias nvm_validate_implicit_alias nvm_resolve_alias nvm_ls_current nvm_alias nvm_binary_available nvm_change_path nvm_strip_path nvm_num_version_groups nvm_format_version nvm_ensure_version_prefix nvm_normalize_version nvm_is_valid_version nvm_normalize_lts nvm_ensure_version_installed nvm_cache_dir nvm_version_path nvm_alias_path nvm_version_dir nvm_find_nvmrc nvm_find_up nvm_find_project_dir nvm_tree_contains_path nvm_version_greater nvm_version_greater_than_or_equal_to nvm_print_npm_version nvm_install_latest_npm nvm_npm_global_modules nvm_has_system_node nvm_has_system_iojs nvm_download nvm_get_latest nvm_has nvm_install_default_packages nvm_get_default_packages nvm_curl_use_compression nvm_curl_version nvm_auto nvm_supports_xz nvm_echo nvm_err nvm_grep nvm_cd nvm_die_on_prefix nvm_get_make_jobs nvm_get_minor_version nvm_has_solaris_binary nvm_is_merged_node_version nvm_is_natural_num nvm_is_version_installed nvm_list_aliases nvm_make_alias nvm_print_alias_path nvm_print_default_alias nvm_print_formatted_alias nvm_resolve_local_alias nvm_sanitize_path nvm_has_colors nvm_process_parameters nvm_node_version_has_solaris_binary nvm_iojs_version_has_solaris_binary nvm_curl_libz_support nvm_command_info nvm_is_zsh nvm_stdout_is_terminal nvm_npmrc_bad_news_bears nvm_get_colors nvm_set_colors nvm_print_color_code nvm_format_help_message_colors nvm_echo_with_colors nvm_err_with_colors nvm_get_artifact_compression nvm_install_binary_extract > /dev/null 2>&1;
            unset NVM_BIN;
            unset NVM_INC
            unset NVM_MAKE_JOBS;
            unset NVM_RC_VERSION NVM_NODEJS_ORG_MIRROR NVM_IOJS_ORG_MIRROR NVM_DIR NVM_CD_FLAGS NVM_BIN NVM_INC NVM_MAKE_JOBS NVM_COLORS INSTALLED_COLOR SYSTEM_COLOR CURRENT_COLOR NOT_INSTALLED_COLOR DEFAULT_COLOR LTS_COLOR > /dev/null 2>&1
            unset PATTERN
            unset PATTERN
            unset TEST_TOOLS ADD_TEST_TOOLS;
            upstream_type="@{upstream}"
            vars=($(compgen -A variable -P ${BASH_REMATCH[1]} -S '}' -- ${BASH_REMATCH[3]})) && arrs=($(compgen -A arrayvar -P ${BASH_REMATCH[1]} -S '[' -- ${BASH_REMATCH[3]}));
            verbose)
            version_not_provided=0;
            w)
            while [ $# -gt 0 ]; do
            while [ $# -gt 0 ]; do
            while [ $# -gt 0 ]; do
            while [ $# -gt 0 ]; do
            while [ $# -gt 0 ]; do
            while [ $# -gt 0 ]; do
            while [ $# -ne 0 ]; do
            while [ $# -ne 0 ]; do
            while [ $# -ne 0 ]; do
            while [ $# -ne 0 ]; do
            while [ $# -ne 0 ]; do
            while [[ $i -gt 0 && ${COMP_WORDS[$i]} == +([$exclude]) ]]; do
            while [[ $i =~ ^([^\"]*)\"([^\"]*)\"(.*)$ ]]; do
            while [[ ${#cur} -ge ${#words[i]} && "${cur:0:${#words[i]}}" != "${words[i]}" ]]; do
            words)
            words=("${words[@]:0:i}" "${words[@]:i+skip}");
            }; then
          "           -e 's#^\([^/]\{1,\}\)/\(.*\)$#\2.\1#;'         | command sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n         | command sed -e 's#\(.*\)\.\([^\.]\{1,\}\)$#\2-\1#;'                       -e "s#^${NVM_NODE_PREFIX}-##;"       )";
          alias = alias_name
          alias_name = "lts/" tolower($10)
          if (!alias) { print "lts/*", alias_name }
          if ($10 && $10 != prev) {
          if (alias) { print alias, version }
          print $1
          print alias, version
          version = $1
          }
          } else {
        "$(nvm_iojs_prefix)" | "$(nvm_node_prefix)")
        "${NVM_IOJS_PREFIX}" | "${NVM_NODE_PREFIX}")
        "${NVM_IOJS_PREFIX}" | "io.js")
        "${NVM_IOJS_PREFIX}")
        "${NVM_NODE_PREFIX}")
        "${NVM_NODE_PREFIX}")
        "--version" | "-v")
        "_${NVM_IOJS_PREFIX}" | '_io.js')
        "_${NVM_NODE_PREFIX}" | "_${NVM_NODE_PREFIX}-")
        "_aix")
        "_freebsd" | "_darwin" | "_openbsd")
        "_linux")
        "_sunos")
        "alias")
        "cache")
        "clear-cache")
        "current")
        "deactivate")
        "debug")
        "exec")
        "install" | "i")
        "install-latest-npm")
        "ls" | "list")
        "ls-remote" | "list-remote")
        "reinstall-packages" | "copy-packages")
        "run")
        "set-colors")
        "stable" | "unstable" | "${NVM_IOJS_PREFIX}" | "${NVM_NODE_PREFIX}")
        "unalias")
        "uninstall")
        "unload")
        "use")
        "version")
        "version-remote")
        "which")
        $NVM_NPM_CMD install -g npm@1.3;
        $reset;
        $reset;
        $reset;
        $reset;
        'B')
        'C')
        'G')
        'K')
        'M')
        'R')
        'W')
        'Y')
        '_system')
        'aix')
        'b')
        'c')
        'darwin')
        'e')
        'freebsd' | 'openbsd')
        'g')
        'k')
        'm')
        'r')
        'y')
        (( OPTIND += 1 ));
        ((COMP_POINT-=${#COMP_WORDS[i]}));
        ));
        ));
        ));
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        -*)
        --!(no-*)@(file|path)*)
        --!(no-*)dir*)
        --+([-a-z0-9_]))
        --exclude | -!(-*)e)
        --help | --usage | --version)
        --help | --version | --separator | -!(-*)[vF])
        --help | --version)
        --magic-file | --files-from | -!(-*)[mf])
        --reference)
        --save)
        --save)
        --tag)
        -6)
        -a)
        -c | --crash-file)
        -f | --file-bug)
        -h | --help | -v | --version | --tag)
        -h | --help | -v | --version | --tag)
        -p | --package)
        -s | --symptom)
        -w | --window)
        -w | --window)
        /usr/lib/command-not-found -- "$1";
        0 | 1)
        0 | 1)
        0)
        1)
        1d;
        2 | 3)
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        AIX\ *)
        ALIAS="${ALIAS_TEMP}";
        ALIAS_TEMP="$(nvm_alias "${ALIAS}" 2>/dev/null || nvm_echo)";
        ARROW='\033[0;90m->\033[0m';
        COMPREPLY+=("${toks[@]}");
        COMPREPLY+=($(compgen -A hostname -P "$prefix$user" -S "$suffix" -- "$cur"));
        COMPREPLY+=($(compgen -P "$prefix$user"             -S "$suffix" -W "$hosts" -- "$cur"));
        COMPREPLY+=($(compgen -P "$prefix$user" -S "$suffix" -W             "$(avahi-browse -cpr _workstation._tcp 2>/dev/null |                awk -F';' '/^=/ { print $7 }' | sort -u)" -- "$cur"));
        COMPREPLY+=($(compgen -W '${svcs[@]#$xinetddir/}' -- "$cur"));
        COMPREPLY+=($(initctl list 2>/dev/null | cut -d' ' -f1));
        COMPREPLY=("${COMPREPLY[@]/*:*$suffix/}");
        COMPREPLY=("${COMPREPLY[@]/+([0-9]).+([0-9]).+([0-9]).+([0-9])$suffix/}");
        COMPREPLY=("${toks[@]}");
        COMPREPLY=($(compgen -P '~' -u -- "${1#\~}"));
        COMPREPLY=($(compgen -W             "$(id -Gn 2>/dev/null || groups 2>/dev/null)" -- "$1"));
        COMPREPLY=($(compgen -W             "$(id -un 2>/dev/null || whoami 2>/dev/null)" -- "${1:-$cur}"));
        COMPREPLY=($(compgen -W "$(LC_ALL=C $1 --help 2>&1 |             while read -r line; do                 [[ $line =~ --[-A-Za-z0-9]+=? ]] &&                     printf '%s\n' ${BASH_REMATCH[0]}
        COMPREPLY=($(compgen -W "$(command sed -ne 's|^iface \([^ ]\{1,\}\).*$|\1|p'            /etc/network/interfaces /etc/network/interfaces.d/* 2>/dev/null)"             -- "$cur"));
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"));
        COMPREPLY=($(compgen -W '$(getent group | cut -d: -f3)' -- "$cur"));
        COMPREPLY=($(compgen -W '$(getent passwd | cut -d: -f3)' -- "$cur"));
        COMPREPLY=($(compgen -W '${opts:-$(_parse_usage "$1")}' -- "$cur"));
        COMPREPLY=($(compgen -W '`command sed -e "y/|/ /" \
        COMPREPLY=($(compgen -d -c -- "$cur"));
        COMPREPLY=($(compgen -g -- "$1"));
        COMPREPLY=($(compgen -u -- "${1:-$cur}"));
        COMPREPLY=($(compgen -u -S @ -- "$cur"));
        COMPRESSION='zip';
        COMP_LINE=${COMP_LINE#"${COMP_WORDS[i]}"};
        COMP_WORDS[i]=${COMP_WORDS[i+$word_offset]};
        CURRENT_COLOR="$(echo "$1" | awk '{ print substr($0, 3, 1); }')";
        CYGWIN* | MSYS* | MINGW*)
        DEFAULT_COLOR="$(echo "$1" | awk '{ print substr($0, 5, 1); }')";
        DEFAULT_PACKAGES='';
        Darwin\ *)
        EXIT_CODE="$?";
        FORMAT='%15s';
        FreeBSD\ *)
        HOST_ARCH=armv7l;
        IFS="${DEFAULT_IFS}" nvm "$@";
        IFS=$OIFS;
        IFS=$OIFS;
        IFS='
        IFS='
        IFS='
        IFS='
        IFS=' ';
        IFS=' ';
        IFS=' ';
        IMPLICIT="$(nvm_print_implicit_alias local "${PATTERN}" 2>/dev/null)";
        IMPLICIT="$(nvm_print_implicit_alias remote "${PATTERN}")";
        INFO="$(type "${COMMAND}" | command sed -E 's/\(|\)//g' | command awk '{print $4}')";
        INSTALLED_COLOR="$(echo "$1" | awk '{ print substr($0, 1, 1); }')";
        LTS="$(nvm_normalize_lts "lts/${LTS}")";
        LTS="${LTS#lts/}";
        LTS="${VERSION_LINE#* }";
        LTS_AND_SYSTEM_COLOR="$(echo "$1" | awk '{ print substr($0, 2, 1); }')";
        Linux\ *)
        MACOS_VERSION="$(sw_vers -productVersion)";
        N="$(echo "${LTS}" | cut -d '-' -f 2)";
        N=$((N+1));
        NEWLINE=' (default)\n';
        NODE_OR_IOJS="${FLAVOR}";
        NODE_VERSION="$(node --version)";
        NORMALIZED_VERSION="$(nvm_normalize_version "$MINOR")";
        NOT_INSTALLED_COLOR="$(echo "$1" | awk '{ print substr($0, 4, 1); }')";
        NVM_ADD_SYSTEM=false;
        NVM_ALIAS_DIR="$(nvm_alias_path)";
        NVM_ARCH=armv7l;
        NVM_DIRS_TO_SEARCH1='';
        NVM_DIRS_TO_SEARCH2='';
        NVM_DIRS_TO_SEARCH3='';
        NVM_FLAVOR="${NVM_NODE_PREFIX}";
        NVM_HAS_COLORS=1;
        NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
        NVM_IS_0_6=1;
        NVM_IS_0_9=1;
        NVM_LATEST_URL="$(curl ${CURL_COMPRESSED_FLAG:-} -q -w "%{url_effective}\\n" -L -s -S http://latest.nvm.sh -o /dev/null)";
        NVM_LS_REMOTE_EXIT_CODE=$?;
        NVM_LS_REMOTE_IOJS_EXIT_CODE=$?;
        NVM_LS_REMOTE_IOJS_OUTPUT=$(nvm_ls_remote_iojs "${PATTERN-}") && :;
        NVM_LS_REMOTE_OUTPUT="$(NVM_LTS="${NVM_LTS-}" nvm_ls_remote "${PATTERN-}") " && :;
        NVM_LS_REMOTE_POST_MERGED_OUTPUT="${NVM_LS_REMOTE_OUTPUT#"$NVM_LS_REMOTE_PRE_MERGED_OUTPUT"}";
        NVM_LS_REMOTE_PRE_MERGED_OUTPUT="${NVM_LS_REMOTE_OUTPUT%%v4\.0\.0*}";
        NVM_MAKE_JOBS="$1";
        NVM_MAKE_JOBS=1;
        NVM_NODE_BINARY='node.exe';
        NVM_NODE_PREFIX="$(nvm_node_prefix)";
        NVM_NO_COLORS="${NVM_NO_COLORS-}" DEFAULT=true nvm_print_formatted_alias "${ALIAS}" "${DEST}";
        NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_CURRENT="${NVM_CURRENT}" nvm_print_alias_path "${NVM_ALIAS_DIR}" "${ALIAS_PATH}" &
        NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_CURRENT="${NVM_CURRENT}" nvm_print_default_alias "${ALIAS_NAME}";
        NVM_NO_COLORS="${NVM_NO_COLORS-}" NVM_LTS="${NVM_LTS-}" DEFAULT=false nvm_print_formatted_alias "${ALIAS}" "${DEST}";
        NVM_NPM_CMD='nvm_echo npm';
        NVM_NUM_COLORS="$(tput -T "${TERM:-vt100}" colors)";
        OpenBSD\ *)
        PATTERN="$(NVM_LTS="${NVM_LTS-}" nvm_ls_remote "${IMPLICIT}" | command tail -1 | command awk '{ print $1 }')";
        PATTERN="${PATTERN%.}";
        PATTERN='current';
        PROGRESS_BAR="--progress-bar";
        PROGRESS_BAR="--progress-bar";
        PROGRESS_BAR="-sS";
        PROGRESS_BAR="-sS";
        PS1="$ps1pc_start$gitstring$ps1pc_end";
        RESULT="$(command ls "${NVM_ALIAS_DIR}/lts" | command tail -n "${N}" | command head -n 1)";
        SANITIZED_PATH="$(nvm_echo "${SANITIZED_PATH}" | command sed -e "s#${HOME}#\${HOME}#g")";
        SANITIZED_PATH="$(nvm_echo "${SANITIZED_PATH}" | command sed -e "s#${NVM_DIR}#\${NVM_DIR}#g")";
        SEEN_ALIASES="${SEEN_ALIASES}\\n${ALIAS_TEMP}";
        SHASUMS_URL="${MIRROR}/${3}/SHASUMS.txt";
        SHASUMS_URL="${MIRROR}/${3}/SHASUMS256.txt";
        SunOS\ *)
        TARBALL_URL="${MIRROR}/${SLUG}.${COMPRESSION}";
        TARBALL_URL="${MIRROR}/${VERSION}/${SLUG}.${COMPRESSION}";
        TMPDIR="$(dirname "${TARBALL}")/files";
        VERSION="$(NVM_LTS="${NVM_LTS-}" nvm_remote_versions "${PATTERN}" | command tail -1)";
        VERSION="$(nvm_alias default 2>/dev/null || nvm_echo)";
        VERSION="$(nvm_version "${DEST}")" || :;
        VERSION="${VERSION_LINE%% *}";
        VERSION_PATH="${VERSION_PATH}/bin";
        WORK=$(mktemp -d) || exit $?;
        [ -z "${ALIAS}" ] || [ "${ALIAS_NAME}" = "${ALIAS}" ]
        [ -z "${NVM_FLAVOR-}" ] || [ "${NVM_FLAVOR-}" = "${NVM_IOJS_PREFIX}" ]
        [[ $COMPREPLY == *= ]] && compopt -o nospace;
        [[ $COMPREPLY == *= ]] && compopt -o nospace;
        [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
        [[ $index -lt 0 ]] && index=0;
        [[ $line == *([[:blank:]])-* ]] || continue;
        [[ $result -gt 0 ]] && compopt -o filenames 2> /dev/null;
        [[ $shell == /* && $shell == "$cur"* ]] && COMPREPLY+=($shell);
        [[ -d "$dir" ]] || continue;
        [[ -e /etc/mandrake-release ]] && _xinetd_services;
        [[ -n $cur && ! -n ${cur//[[:space:]]} ]] && cur=;
        [[ -n $xspec ]] && plusdirs=(-o plusdirs);
        [[ -n ${COMP_FILEDIR_FALLBACK-} ]] || opts+=("${plusdirs[@]}");
        [[ -n ${COMP_FILEDIR_FALLBACK:-} && -n "$1" && ${#toks[@]} -lt 1 ]] && { 
        [[ -r $configfile ]] && config+=("$configfile");
        __expand_tilde_by_ref cur;
        __expand_tilde_by_ref i;
        __git_eread "$g/rebase-merge/end" total;
        __git_eread "$g/rebase-merge/head-name" b;
        __git_eread "$g/rebase-merge/msgnum" step;
        __git_ps1_branch_name=$b;
        __git_ps1_colorize_gitstring;
        __load_completion "$srcfile"
        __parse_options "${line// or /, }";
        _filedir $xspec;
        _filedir -d;
        _get_cword "${@:-}" 1;
        _included_ssh_config_files "$i";
        _known_hosts_real "$cur";
        _quote_readline_by_ref "$cur" quoted;
        _services;
        _sysvdirs;
        aarch64)
        alias | unalias)
        aliases="$(command cd "${NVM_DIR}/alias" && command find "${PWD}" -type f | command sed "s:${PWD}/::")";
        apport-cli)
        apport-collect)
        apport-unpack)
        b="\${__git_ps1_branch_name}";
        binary | source)
        binary | source)
        branch_color="$bad_color";
        branch_color="$ok_color";
        c="$branch_color$c$c_clear";
        case "$1" in 
        case "$count" in 
        case "$count" in 
        case "$i" in 
        case "$key" in 
        case "$option" in 
        case "${ALIAS}" in 
        case "${PATTERN}" in 
        case "${PATTERN}" in 
        case "${command}" in 
        case "${current_word}" in 
        case $1 in 
        case $1 in 
        case $1 in 
        case $cmd in 
        case $cmd in 
        case $cur in 
        case $flag in 
        case $flag in 
        case $flag in 
        case $i in 
        case ${!OPTIND} in 
        command "${tar}" -x${tar_compression_flag}f "${TARBALL}" -C "${TMPDIR}" --strip-components 1 || return 1;
        command awk 'BEGIN {
        command awk '{
        command chmod +x "${VERSION_PATH}"/node.exe || return 1;
        command chmod +x "${VERSION_PATH}"/npm || return 1;
        command chmod +x "${VERSION_PATH}"/npx 2> /dev/null;
        command mv "${TMPDIR}/"* "${VERSION_PATH}" || return 1;
        command mv "${TMPDIR}/"*/* "${VERSION_PATH}" || return 1;
        command printf " (npm v$(npm --version 2>/dev/null))";
        command printf -- "${ALIAS_FORMAT} ${ARROW} ${DEST_FORMAT} (${ARROW} ${VERSION_FORMAT})${NEWLINE}" "${ALIAS}" "${DEST}" "${VERSION}";
        command printf -- "${ALIAS_FORMAT} ${ARROW} ${VERSION_FORMAT}${NEWLINE}" "${ALIAS}" "${DEST}";
        command rm -rf "${TARBALL}" "${tmpdir}";
        command rm -rf "${TARBALL}";
        command rm -rf "${TMPDIR-}";
        command rm -rf "${TMPDIR}";
        command sed -e 's/[[:space:]]addr:/ /' -ne             "s|.*inet${n}[[:space:]]\{1,\}\([^[:space:]/]*\).*|\1|p");
        command sha256sum "${FILE}" | command awk '{print $1}';
        command unzip -q "${TARBALL}" -d "${TMPDIR}" || return 1;
        command="${COMP_WORDS[COMP_CWORD - 2]}";
        compgen -d -- "$(quote_readline "$cur")" | {
        compopt -o filenames 2> /dev/null;
        compopt -o filenames;
        compopt -o filenames;
        compopt -o nospace;
        conflict="|CONFLICT";
        count="$(git rev-list --count --left-right 				"$upstream_type"...HEAD 2>/dev/null)";
        cur="${cur##$redir}";
        cur="${cur#*=}";
        cur=$COMP_LINE;
        curl --fail ${CURL_COMPRESSED_FLAG:-} -q "$@";
        darwin)
        dirs+=("${BASH_SOURCE%/*}/completions");
        dirs+=($dir/bash-completion/completions);
        dirs+=(./completions);
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        done
        done
        done
        done < "${WORK}/default-packages";
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        echo "${DEFAULT_PACKAGES}" | command xargs;
        echo "bash_completion: $FUNCNAME: usage: $FUNCNAME" "[-v varname value] | [-aN varname [value ...]] ..." 1>&2;
        elif [[ ${1:-} == -a ]]; then
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        esac
        esac
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        eval "NVM_CONFIG_VALUE=\"\$${NVM_NPM_CONFIG_x_PREFIX_ENV}\"";
        eval $1=$(printf ~%q "${!1#\~}");
        eval compgen -f -X "'!$xspec'" -- "\$(quote_readline "\$cur")" | {
        exclude="${1//[^$COMP_WORDBREAKS]}";
        export NVM_COLORS="$1";
        fi
        fi
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        find /{etc,lib,usr/lib,usr/share}/terminfo/? -type f -maxdepth 1             | awk -F/ '{ print $NF }';
        for ((i = 0; i <= cword; ++i ))
        for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++))
        for ((i=0; i < ${#COMPREPLY[@]}; i++ ))
        for ((j=0; j <= ${#COMP_LINE}; j++ ))
        for FILE in $(ls /usr/share/apport/symptoms);
        for compfile in "$cmd" "$cmd.bash" "_$cmd";
        for f in ${i};
        for i in "${!COMPREPLY[@]}";
        for i in "${!COMP_WORDS[@]}";
        for i in "${tmpkh[@]}";
        for i in /etc/ssh/ssh_config ~/.ssh/config ~/.ssh2/config;
        for i in /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 /etc/known_hosts /etc/known_hosts2 ~/.ssh/known_hosts ~/.ssh/known_hosts2;
        for i in /etc/ssh2/knownhosts ~/.ssh2/hostkeys;
        for j in $(compgen -d -- $i/$cur);
        for line in "${psout[@]}";
        fss="$(awk '/^[ \t]*[^#]/ { print $3 }' /etc/fstab 2>/dev/null)
        fss="$(cut -d'	' -f2 /proc/filesystems)
        git)
        i*86)
        i="$ok_color$i$c_clear";
        i=${COMPREPLY[0]};
        if ! [ -d "${NVM_DIRS_TO_SEARCH1}" ] || ! ( command ls -1qA "${NVM_DIRS_TO_SEARCH1}" | nvm_grep -q . ); then
        if ! [ -d "${NVM_DIRS_TO_SEARCH2}" ] || ! ( command ls -1qA "${NVM_DIRS_TO_SEARCH2}" | nvm_grep -q . ); then
        if ! [ -d "${NVM_DIRS_TO_SEARCH3}" ] || ! ( command ls -1qA "${NVM_DIRS_TO_SEARCH3}" | nvm_grep -q . ); then
        if ! [ -f "${FILE}" ]; then
        if ! [ -f "${FILE}" ]; then
        if ! [[ "$i" =~ ^\~.*|^\/.* ]]; then
        if ! nvm_echo "${1-}" | nvm_grep -q "${NVM_DIR}/[^/]*${2-}" && ! nvm_echo "${1-}" | nvm_grep -q "${NVM_DIR}/versions/[^/]*/[^/]*${2-}"; then
        if ! nvm_has_colors; then
        if (!$1) { next }
        if ($10 !~ /^\-?$/) {
        if ($10 && !a[tolower($10)]++) {
        if ($10 ~ /^\-?$/) { next }
        if (( $# == 2 )); then
        if (alias) {
        if (lts && $10 ~ /^\-?$/) { next }
        if (lts && lts != "*" && tolower($10) !~ tolower(lts)) { next }
        if HOST_ARCH=$(pkg_info -Q MACHINE_ARCH pkg_install); then
        if VERSION="$(nvm_resolve_alias "${PROVIDED_VERSION}")"; then
        if [ "${-#*a}" != "$-" ]; then
        if [ "${COMPUTED_SUM}" != "${CHECKSUM}" ]; then
        if [ "${FLAVOR}" = 'iojs' ]; then
        if [ "${FLAVOR}" = 'iojs' ]; then
        if [ "${KIND}" = 'source' ]; then
        if [ "${LTS}" != "${VERSION}" ]; then
        if [ "${NODE_VERSION}" = 'none' ]; then
        if [ "${NVM_ARCH}" = 'armv6l' ] || [ "${NVM_ARCH}" = 'armv7l' ]; then
        if [ "${NVM_CPU_CORES}" -gt 2 ]; then
        if [ "${NVM_OS}" = 'aix' ]; then
        if [ "${NVM_SILENT:-0}" -ne 1 ]; then
        if [ "${NVM_SILENT:-0}" -ne 1 ]; then
        if [ "${RESULT}" != '*' ]; then
        if [ "${__git_printf_supports_v-}" != yes ]; then
        if [ "_$2" = '_unstable' ]; then
        if [ "_$NVM_MODE" = '_use' ]; then
        if [ "_${DEFAULT}" = '_true' ]; then
        if [ "_${DEST%/*}" = "_lts" ]; then
        if [ "_${NVM_DELETE_PREFIX}" = "_1" ]; then
        if [ "_${NVM_DELETE_PREFIX}" = "_1" ]; then
        if [ "_${NVM_DELETE_PREFIX}" = "_1" ]; then
        if [ "_${NVM_DELETE_PREFIX}" = "_1" ]; then
        if [ "_${NVM_LTS-}" = '_true' ]; then
        if [ "_${NVM_OS}" = "_aix" ]; then
        if [ "_${NVM_OS}" = '_darwin' ] && [ "${NVM_ARCH}" = 'arm64' ]; then
        if [ "_${NVM_OS}" = '_freebsd' ]; then
        if [ "_${NVM_WHICH_DIR}" = "_iojs" ]; then
        if [ "_${VERSION}" != '_∞' ] && [ "_${VERSION}" != '_N/A' ]; then
        if [ "_${VERSION}" = "_${NVM_CURRENT-}" ]; then
        if [ "_${VERSION}" = "_${NVM_CURRENT}" ]; then
        if [ "_0${NORMALIZED_VERSION#?}" != "_$NORMALIZED_VERSION" ]; then
        if [ "true" = "$bare_repo" ]; then
        if [ "true" = "$inside_worktree" ]; then
        if [ $NVM_IS_0_9 -eq 0 ]; then
        if [ -d "$FILE" ]; then
        if [ -d "$g/rebase-apply" ]; then
        if [ -n "$b" ]; then
        if [ -n "${1-}" ]; then
        if [ -n "${ADDITIONAL_PARAMETERS}" ]; then
        if [ -n "${ALIAS-}" ]; then
        if [ -n "${IMPLICIT}" ]; then
        if [ -n "${NVM_CONFIG_VALUE-}" ] && ! nvm_tree_contains_path "${NVM_DIR}" "${NVM_CONFIG_VALUE}"; then
        if [ -n "${NVM_CONFIG_VALUE-}" ] && [ "_${NVM_OS}" = "_win" ]; then
        if [ -n "${NVM_DIRS_TO_SEARCH1}${NVM_DIRS_TO_SEARCH2}${NVM_DIRS_TO_SEARCH3}" ]; then
        if [ -n "${PATTERN}" ]; then
        if [ -n "${VERSION}" ]; then
        if [ -x /usr/share/command-not-found/command-not-found ]; then
        if [ -z "${ALIAS_TEMP}" ]; then
        if [ -z "${CC-}" ] || [ -z "${CXX-}" ]; then
        if [ -z "${IMPLICIT-}" ] || [ "${IMPLICIT}" = 'N/A' ]; then
        if [ -z "${PATTERN}" ] || [ "${PATTERN}" = 'v' ]; then
        if [ -z "${PATTERN}" ]; then
        if [[ ! -n $cspec && $cmd == */* ]]; then
        if [[ ! -n $cspec ]]; then
        if [[ "$1" == *@(rmdir|chroot) ]]; then
        if [[ "$cur" == \~* ]]; then
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
        if [[ "${#words[cword]}" -eq 0 || "$COMP_POINT" == "${#COMP_LINE}" ]]; then
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
        if [[ $1 == \'* ]]; then
        if [[ $cur == *\\:* ]]; then
        if [[ $cur == \${* ]]; then
        if [[ $cur =~ ^(\$\{[#!]?)([A-Za-z0-9_]*)\[([^]]*)$ ]]; then
        if [[ $i -eq -1 ]]; then
        if [[ ${#kh[@]} -gt 0 ]]; then
        if [[ ${#khd[@]} -gt 0 ]]; then
        if [[ ${1:-} == -w ]]; then
        if [[ ${words[i]} != -* && ${words[i-1]} != $2 || ${words[i]} == $3 ]]; then
        if [[ ${words[i]} == $redir* ]]; then
        if [[ -f /etc/SuSE-release ]]; then
        if [[ -n "$count" && -n "$name" ]]; then
        if [[ -n $cspec ]]; then
        if command printf "${SEEN_ALIASES}" | nvm_grep -q -e "^${ALIAS_TEMP}$"; then
        if commits="$(git rev-list --left-right "$upstream_type"...HEAD 2>/dev/null)"; then
        if nvm_alias default > /dev/null 2>&1; then
        if nvm_compare_checksum "${TARBALL}" "${CHECKSUM}" > /dev/null 2>&1; then
        if nvm_curl_use_compression; then
        if nvm_curl_use_compression; then
        if nvm_has "wget"; then
        if nvm_has "wget"; then
        if nvm_has_non_aliased "shasum"; then
        if nvm_has_non_aliased 'shasum'; then
        if nvm_has_system_iojs || nvm_has_system_node; then
        if nvm_is_iojs_version "${PATTERN}"; then
        if nvm_is_iojs_version "${VERSION}"; then
        if nvm_is_iojs_version "${VERSION}"; then
        if nvm_is_version_installed "${PATTERN}"; then
        if nvm_supports_xz "${VERSION}"; then
        if nvm_supports_xz "${VERSION}"; then
        if nvm_tree_contains_path "$(nvm_version_dir iojs)" "${NVM_LS_CURRENT_NODE_PATH}"; then
        if nvm_version_greater "10.9.0" "${MACOS_VERSION}"; then
        if nvm_version_greater 0.2.0 "${VERSION}"; then
        if nvm_version_greater 1.1.0 "${NODE_VERSION}"; then
        if test -f "$g/REVERT_HEAD"; then
        if type "${COMMAND}" | nvm_grep -q aliased; then
        if type -p realpath > /dev/null; then
        if type perl &> /dev/null; then
        if type perl &> /dev/null; then
        iojs-*)
        iojs-*)
        iojs-std)
        iojs-std)
        k="${#COMPREPLY[@]}";
        line=$COMP_LINE;
        local -a psout=($(command ps axo command=));
        local -a svcs=($(printf '%s\n' $xinetddir/!($_backup_glob)));
        local CURRENT_COLOR;
        local DEFAULT_COLOR;
        local DEFAULT_PACKAGES;
        local EXIT_CODE;
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS=' 	
        local IMPLICIT;
        local IMPLICIT;
        local INSTALLED_COLOR;
        local LTS_AND_SYSTEM_COLOR;
        local MACOS_VERSION;
        local N;
        local NOT_INSTALLED_COLOR;
        local NVM_ADD_SYSTEM;
        local NVM_ALIAS_DIR;
        local NVM_CONFIG_VALUE;
        local NVM_DIRS_TO_SEARCH1;
        local NVM_DIRS_TO_SEARCH2;
        local NVM_DIRS_TO_SEARCH3;
        local NVM_IOJS_PREFIX;
        local NVM_LS_REMOTE_OUTPUT;
        local NVM_NODE_PREFIX;
        local RESULT;
        local SEARCH_PATTERN;
        local c_clear='[0m';
        local c_clear='%f';
        local c_green='[32m';
        local c_green='%F{green}';
        local c_lblue='[1;34m';
        local c_lblue='%F{blue}';
        local c_red='[31m';
        local c_red='%F{red}';
        local cmd=${COMP_WORDS[0]} compcmd=${COMP_WORDS[0]};
        local colon_word=${1%"${1##*:}"};
        local commits;
        local cspec=$(complete -p $cmd 2>/dev/null);
        local hosts=$(command sed -ne 's/^[[:blank:]]*[Hh][Oo][Ss][Tt][[:blank:]]\{1,\}\([^#*?%]*\)\(#.*\)\{0,1\}$/\1/p' "${config[@]}");
        local i=${#COMPREPLY[*]};
        local line i=-1 OIFS=$IFS;
        local line;
        local opts=$(_parse_help "$1");
        local opts=(-f -X "$xspec");
        local quoted;
        local reset=$(shopt -po noglob);
        local sysvdirs;
        local tar;
        local tar_compression_flag;
        local xspec;
        local xspec=${1:+"!*.@($1|${1^^})"} plusdirs=();
        matchop=@;
        node | iojs)
        node | iojs)
        node | iojs)
        node | iojs)
        node | iojs)
        node)
        node-std)
        node-std)
        nvm --help;
        nvm deactivate > /dev/null 2>&1;
        nvm_add_iojs_prefix "${NVM_VERSION}";
        nvm_alias "${ALIAS}";
        nvm_compare_checksum "${TARBALL}" "${CHECKSUM}";
        nvm_echo "${1#"${NVM_IOJS_PREFIX}"-}";
        nvm_echo "${3-}${2-}";
        nvm_echo "${FLAVOR}-${VERSION}-${NVM_OS}-${NVM_ARCH}";
        nvm_echo "${LTS}";
        nvm_echo "${NVM_DIR}/versions/node";
        nvm_echo "${NVM_VERSION}";
        nvm_echo "${STABLE}";
        nvm_echo "${VERSION}" | command cut -f1-3 -d.;
        nvm_echo "${VERSION}";
        nvm_echo "${VERSION}";
        nvm_echo "${dir}/.nvmrc";
        nvm_echo "0";
        nvm_echo "Additional options while compiling: ${ADDITIONAL_PARAMETERS}";
        nvm_echo "Detected node version ${NODE_VERSION}, npm version v${NPM_VERSION}";
        nvm_echo "Detected that you have ${NVM_CPU_CORES} CPU core(s)";
        nvm_echo "Found '${NVMRC_PATH}' with version <${NVM_RC_VERSION}>";
        nvm_echo "N/A";
        nvm_echo "number of \`make\` jobs: ${NVM_MAKE_JOBS}";
        nvm_echo '* `node` v0.6.x can only upgrade to `npm` v1.3.x';
        nvm_echo '* node v0.6 and v0.9 are unable to upgrade further';
        nvm_echo 'Installing npm...';
        nvm_echo 'N/A';
        nvm_echo 'N/A';
        nvm_echo 'N/A';
        nvm_echo 'none';
        nvm_echo 'sha256sum';
        nvm_echo;
        nvm_err "";
        nvm_err "Checksum check failed!";
        nvm_err "Computed checksum of '${FILE}' is empty.";
        nvm_err "Failed installing default packages. Please check if your default-packages file or a package in it has problems!";
        nvm_err "HTTP 404 at URL ${TARBALL_URL}";
        nvm_err "Local cache found: $(nvm_sanitize_path "${TARBALL}")";
        nvm_err "N/A: no system version of node/io.js is installed.";
        nvm_err "No precompiled binary available for ${VERSION}.";
        nvm_err "Removing the broken local cache...";
        nvm_err "You need to run \"nvm install ${PROVIDED_VERSION}\" to install it before using it.";
        nvm_err "an alias name is required";
        nvm_err "an alias target version is required";
        nvm_err "both the tree and the node path are required";
        nvm_err "http://latest.nvm.sh did not redirect to the latest release on GitHub";
        nvm_err "nvm is not compatible with the \"PREFIX\" environment variable: currently set to \"${PREFIX}\"";
        nvm_err "nvm: install ${VERSION} failed!";
        nvm_err "nvm_print_implicit_alias must be specified with local or remote as the first argument.";
        nvm_err '${NVM_DIR} not set!';
        nvm_err 'A default alias is required.';
        nvm_err 'A version number is required.';
        nvm_err 'A version number is required.';
        nvm_err 'A version number is required.';
        nvm_err 'Alias does not exist.';
        nvm_err 'An alias dir is required.';
        nvm_err 'An alias is required.';
        nvm_err 'An alias path is required.';
        nvm_err 'Binary download failed. Download from source aborted.';
        nvm_err 'Can not determine how many core(s) are available, running in single-threaded mode.';
        nvm_err 'Computing checksum with sha256sum';
        nvm_err 'Implicit aliases are not supported in nvm_remote_versions.';
        nvm_err 'Please report an issue on GitHub to help us make nvm run faster on your computer!';
        nvm_err 'Provided checksum to compare to is empty.';
        nvm_err 'Provided file to checksum is empty.';
        nvm_err 'Provided file to checksum is empty.';
        nvm_err 'Run `unset PREFIX` to unset it.';
        nvm_err 'Second argument "nvm command", and third argument "nvm version dir", must both be nonempty';
        nvm_err 'Unable to obtain node version.';
        nvm_err 'Unable to obtain npm version.';
        nvm_err 'WARNING: Continuing *without checksum verification*';
        nvm_err 'a version is required';
        nvm_err 'invalid version number! (please report this)';
        nvm_err 'not enough arguments';
        nvm_err 'nvm_ensure_default_set: a version is required';
        nvm_err 'nvm_install_binary_extract needs 5 parameters';
        nvm_err 'version is required';
        nvm_format_version "${VERSION%.}.0";
        nvm_is_zsh && setopt local_options shwordsplit;
        nvm_is_zsh && unsetopt local_options markdirs;
        nvm_ls_current;
        nvm_ls_current;
        nvm_version "${VERSION}";
        option2=${option/"${BASH_REMATCH[1]}"/};
        option2=${option2%%[<{().[]*};
        option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"};
        path_=${path_%/*};
        path_=${path_%/*};
        pathdir=$(dirname "${previous_pathdir}");
        prev="${cur%%?(\\)=*}";
        prev=$10;
        previous_pathdir="${pathdir}";
        printf "%s" "${words[cword-$2]}";
        printf '%s\n' "${option2/=*/=}";
        printf -- "$printf_format" "$gitstring";
        printf -v $2 %s "$1";
        procs=($(command ps axo comm | command sed -e 1d));
        r="$r $step/$total";
        r="|CHERRY-PICKING";
        r="|REBASE";
        repo_info="${repo_info%
        reset=$(shopt -po noglob);
        reset=$(shopt -po noglob);
        result=${#COMPREPLY[@]};
        return "$EXIT_CODE";
        return $?;
        return $?;
        return $?;
        return $EXIT_CODE;
        return $exit;
        return $exit;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 0;
        return 17;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 1;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 2;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 3;
        return 4;
        return 4;
        return 5;
        return 5;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        return;
        s/^/${PREFIX}/;
        s="$flags_color$s$c_clear";
        sed -e '$a\' "${NVM_DEFAULT_PACKAGE_FILE}" > "${WORK}/default-packages";
        set +e;
        set -e;
        set -o noglob;
        set -o noglob;
        set -o noglob;
        sha1sum | sha1)
        sha256sum | shasum | sha256 | gsha256sum | openssl | bssl)
        shift;
        shopt -s nullglob;
        short_sha="${repo_info##*
        sparse="|SPARSE";
        svn*)
        tar='gtar';
        tar_compression_flag='J';
        tar_compression_flag='z';
        tmpdir="$(nvm_cache_dir)/bin/${SLUG}";
        tmpdir="$(nvm_cache_dir)/src/${SLUG}";
        tmpkh=($(awk 'sub("^[ \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][ \t]+", "") { print $0 }' "${config[@]}" | sort -u));
        toks+=($(compgen "${opts[@]}" -- $quoted));
        toks+=($(compgen -f -- "$(quote_readline "$cur")"));
        toks=($(compgen -d -- "$cur"));
        trap "command rm -rf '$WORK'" EXIT;
        u="$bad_color$u$c_clear";
        ubuntu-bug | apport-bug)
        unset 'COMP_WORDS[i]';
        unset PATTERN;
        upargs+=(-a${#words[@]} $vwords "${words[@]}")
        upargs+=(-v $vcur "$cur")
        upargs+=(-v $vcword "$cword")
        upargs+=(-v $vprev "${words[cword - 1]}")
        upvars+=("$vcur");
        upvars+=("$vcword");
        upvars+=("$vprev");
        upvars+=("$vwords");
        use | run | exec | ls | list | uninstall)
        v | .* | *..* | v*[!.0123456789]* | [!v]*[!.0123456789]* | [!v0123456789]* | v[!0123456789]*)
        v*)
        w="$bad_color$w$c_clear";
        while IFS=' ' read -r line; do
        while [[ $((--i)) -ge 0 ]]; do
        while [[ $line =~ ((^|[^-])-[A-Za-z0-9?][[:space:]]+)\[?[A-Z0-9]+([,_-]+[A-Z0-9]+)?(\.\.+)?\]? ]]; do
        while [[ $line =~ \[[[:space:]]*(-[^]]+)[[:space:]]*\] ]]; do
        while read -r tmp; do
        while read -r tmp; do
        x86_64 | amd64)
        xspec=${xspec#!};
        { 
        { 
        { toe -a || toe; } | awk '{ print $1 }';
        }
        }
        }
        }
        }
        } &
        } &
        } else {
        };
      "   )";
      END {
      else if (a[i] > b[i]) exit(0);
      else if (a[i] > b[i]) exit(0);
      if (a[i] && a[i] !~ /^[0-9]+$/) exit(2);
      if (a[i] && a[i] !~ /^[0-9]+$/) exit(2);
      if (a[i] < b[i]) exit(3);
      if (a[i] < b[i]) exit(3);
      if (b[i] && b[i] !~ /^[0-9]+$/) { exit(0); }
      n = split(ARGV[1], a);
      print a[1]
      }
      }'     | nvm_grep -w "${PATTERN:-.*}"     | $SORT_COMMAND; } << EOF
      }' | while read -r LTS_ALIAS_LINE; do
    "$@"
    $reset;
    $split && return;
    $split && return;
    $split && return;
    ( local ALIAS_NAME;
    ( local ALIAS_PATH;
    ( local LTS_ALIAS;
    (( ${#upvars[@]} )) && local "${upvars[@]}" && _upvars "${upargs[@]}"
    (( OPTIND += 1 ));
    ((COMP_CWORD -= $word_offset));
    ADDITIONAL_PARAMETERS="${5-}";
    ALIAS="$(nvm_normalize_lts "${ALIAS}")";
    ALIAS="${1-}";
    ALIAS="${1-}";
    ALIAS="${1-}";
    ALIAS="${1-}";
    ALIAS="${1-}";
    ALIAS="${ALIAS_PATH##"${NVM_ALIAS_DIR}"\/}";
    ALIAS="${PATTERN}";
    ALIAS_FORMAT='%s';
    ALIAS_NAME="$(nvm_iojs_prefix)";
    ALIAS_PATH="${2-}";
    ARROW='->';
    CHECKSUM="$(nvm_get_checksum "${FLAVOR}" "${TYPE}" "${VERSION}" "${SLUG}" "${COMPRESSION}")";
    CHECKSUM="${2-}";
    COMMAND="${1-}";
    COMMAND="${1}";
    COMMANDS='
    COMPREPLY+=("${sigs[@]/#${1}SIG/${1}}")
    COMPREPLY+=($(        { LC_ALL=C ifconfig -a || ip link show; } 2>/dev/null | command sed -ne         "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]].*/\1/p" -ne         "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]]*$/\1/p" -ne         "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]].*|\2|p" -ne         "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]]*$|\2|p"
    COMPREPLY+=($(command sed -ne         "s/^[[:space:]]*\($re\)[[:space:]].*/\1/p" /etc/ethers 2>/dev/null));
    COMPREPLY+=($(compgen -W         "$(PATH="$PATH:/sbin" lspci -n | awk '{print $3}')" -- "$cur"))
    COMPREPLY+=($(compgen -W         "$(PATH="$PATH:/sbin" lsusb | awk '{print $6}')" -- "$cur"))
    COMPREPLY+=($(compgen -W         "$(ruptime 2>/dev/null | awk '!/^ruptime:/ { print $1 }')"         -- "$cur"));
    COMPREPLY+=($(compgen -W "$({         command sed -ne 's/^\([^[:space:]#|]\{2,\}\)|.*/\1/p' /etc/termcap;
    COMPREPLY+=($(compgen -W "$addrs" -- "$cur"))
    COMPREPLY+=($(compgen -f -d -X "!*/?([amrs])cd*" -- "${cur:-/dev/}"))
    COMPREPLY+=($(compgen -f -d -X "!*/?(r)dvd*" -- "${cur:-/dev/}"))
    COMPREPLY+=($({ arp -an || ip neigh show; } 2>/dev/null | command sed -ne         "s/.*[[:space:]]\($re\)[[:space:]].*/\1/p" -ne         "s/.*[[:space:]]\($re\)[[:space:]]*$/\1/p"));
    COMPREPLY+=($({ systemctl list-units --full --all ||                      systemctl list-unit-files; } 2>/dev/null |         awk '$1 ~ /\.service$/ { sub("\\.service$", "", $1); print $1 }'));
    COMPREPLY=($( compgen -W "$param" -- $cur))
    COMPREPLY=($(compgen -W "$(PATH="$PATH:/sbin" lsmod |         awk '{if (NR != 1) print $1}')" -- "$1"))
    COMPREPLY=($(compgen -W "$(command ls -RL $modpath 2>/dev/null |         command sed -ne 's/^\(.*\)\.k\{0,1\}o\(\.[gx]z\)\{0,1\}$/\1/p')" -- "$cur"))
    COMPREPLY=($(compgen -W "$1" -- "${current_word}"));
    COMPREPLY=($(compgen -W '$(command ls /lib/modules)' -- "$cur"))
    COMPREPLY=($(compgen -W '$(command ps axo pgid=)' -- "$cur"))
    COMPREPLY=($(compgen -W '$(command ps axo pid=)' -- "$cur"))
    COMPREPLY=($(compgen -W '${COMPREPLY[@]#${sysvdirs[0]}/}' -- "$cur"))
    COMPREPLY=($(compgen -W '${COMPREPLY[@]/%[[:punct:]]/}' -- "$cur"))
    COMPREPLY=($(compgen -W '${COMPREPLY[@]}' -- "$cur"));
    COMPREPLY=($(compgen -X "<defunct>" -W '${procs[@]}' -- "$cur" ))
    COMPREPLY=($(printf '%s\n' ${sysvdirs[0]}/!($_backup_glob|functions|README)));
    COMPREPLY=($({
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPRESSION="$(nvm_get_artifact_compression "${VERSION}")";
    COMPRESSION='tar.gz';
    COMPUTED_SUM="$(nvm_compute_checksum "${FILE}")";
    CURRENT_COLOR=$(nvm_get_colors 3);
    CURRENT_COLOR=$(nvm_get_colors 3);
    DEFAULT_COLOR=$(nvm_get_colors 5);
    DEFAULT_COLOR=$(nvm_get_colors 5);
    DEFAULT_IFS=" $(nvm_echo t | command tr t \\t)
    DEST="$(nvm_alias "${ALIAS}" 2>/dev/null)" || :;
    DEST="$(nvm_print_implicit_alias local "${ALIAS}")";
    DEST="${2-}";
    DEST_FORMAT='%s';
    EXIT_CODE="$?";
    EXIT_CODE="$?";
    EXIT_CODE=$?;
    FILE="${1-}";
    FILE="${1-}";
    FLAVOR="${1-}";
    GREP_OPTIONS='' command grep "$@"
    IFS=$OIFS;
    IFS=' 	
    INSTALLED_COLOR=$(nvm_get_colors 1);
    INSTALLED_COLOR=$(nvm_get_colors 1);
    INSTALLS=$(nvm_echo "${NPMLIST}" | command sed -e '/ -> / d' -e '/\(empty\)/ d' -e 's/^.* \(.*@[^ ]*\).*/\1/' -e '/^npm@[^ ]*.*$/ d' | command xargs);
    IOJS_VERSION="$1";
    L=$(ls -dl /sbin/init 2>/dev/null);
    LINKS="$(nvm_echo "${NPMLIST}" | command sed -n 's/.* -> \(.*\)/\1/ p')";
    LOCAL_VERSION="$(nvm_version "${PROVIDED_VERSION}")";
    LTS="${1-}";
    LTS="${NVM_LTS-}";
    LTS_COLOR=$(nvm_get_colors 6);
    LTS_COLOR=$(nvm_get_colors 6);
    MINOR="$(nvm_echo "${PREFIXED_VERSION}" | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2)";
    MIRROR="$(nvm_get_mirror "${FLAVOR}" "${2-}")";
    MIRROR="$(nvm_get_mirror "${FLAVOR}" "${TYPE}")";
    MIRROR="$(nvm_get_mirror "${FLAVOR}" "${TYPE}")";
    NEWLINE='\n';
    NODE_VERSION="$(nvm_strip_iojs_prefix "$(nvm_ls_current)")";
    NODE_VERSION="$1";
    NOT_INSTALLED_COLOR=$(nvm_get_colors 4);
    NOT_INSTALLED_COLOR=$(nvm_get_colors 4);
    NPMLIST=$(nvm use "${VERSION}" >/dev/null && npm list -g --depth=0 2>/dev/null | command sed 1,1d | nvm_grep -v 'UNMET PEER DEPENDENCY');
    NPM_VERSION="$(npm --version 2>/dev/null)";
    NUM_GROUPS="$(nvm_num_version_groups "${VERSION}")";
    NVMRC_PATH="$(nvm_find_nvmrc)";
    NVM_ALIAS_DIR="$(nvm_alias_path)";
    NVM_ALIAS_DIR="${1-}";
    NVM_ALIAS_PATH="$(nvm_alias_path)/${ALIAS}";
    NVM_ARCH="$(nvm_get_arch)";
    NVM_ARCH="$(nvm_get_arch)";
    NVM_AUTO_MODE='use';
    NVM_CHECKSUM_BIN="$(nvm_get_checksum_binary 2>/dev/null)";
    NVM_COMMAND="${2-}";
    NVM_CURRENT="$(nvm_ls_current)";
    NVM_CURRENT=$(nvm_ls_current);
    NVM_DELETE_PREFIX="${1-}";
    NVM_IMPLICIT="$2";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IOJS_PREFIX="$(nvm_iojs_prefix)";
    NVM_IS_0_6=0;
    NVM_IS_0_9=0;
    NVM_LATEST_LTS_COLOR=$(nvm_echo "${CURRENT_COLOR}" | command tr '0;' '1;');
    NVM_LS_REMOTE_EXIT_CODE=0;
    NVM_LS_REMOTE_IOJS_EXIT_CODE=0;
    NVM_LS_REMOTE_IOJS_OUTPUT='';
    NVM_LS_REMOTE_POST_MERGED_OUTPUT='';
    NVM_LS_REMOTE_PRE_MERGED_OUTPUT='';
    NVM_LTS="${NVM_LTS-}" nvm_ls_remote_index_tab iojs std "${1-}"
    NVM_LTS="${NVM_LTS-}" nvm_ls_remote_index_tab node std "${PATTERN}"
    NVM_MAKE_JOBS="${4-}";
    NVM_MODE="${1-}";
    NVM_NODE_BINARY='node';
    NVM_NODE_PREFIX="$(nvm_node_prefix)";
    NVM_NODE_PREFIX="$(nvm_node_prefix)";
    NVM_NODE_PREFIX="$(nvm_node_prefix)";
    NVM_NODE_PREFIX="$(nvm_node_prefix)";
    NVM_NODE_PREFIX="$(nvm_node_prefix)";
    NVM_NPMRC="${1-}";
    NVM_NPM_BUILTIN_NPMRC="${NVM_VERSION_DIR}/lib/node_modules/npm/npmrc";
    NVM_NPM_CMD='npm';
    NVM_NPM_CONFIG_x_PREFIX_ENV="$(command awk 'BEGIN { for (name in ENVIRON) if (toupper(name) == "NPM_CONFIG_PREFIX") { print name; break } }')";
    NVM_NPM_GLOBAL_NPMRC="${NVM_VERSION_DIR}/etc/npmrc";
    NVM_NPM_PROJECT_NPMRC="$(nvm_find_project_dir)/.npmrc";
    NVM_NPM_USER_NPMRC="${HOME}/.npmrc";
    NVM_NUM_DOTS=$(nvm_echo "${VERSION}" | command sed -e 's/[^\.]//g');
    NVM_NUM_GROUPS=".${NVM_NUM_DOTS}";
    NVM_OLD_LTS_COLOR="${DEFAULT_COLOR}";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="$(nvm_get_os)";
    NVM_OS="${1}";
    NVM_RC_VERSION="$(command head -n 1 "${NVMRC_PATH}" | command tr -d '\r')" || command printf '';
    NVM_UNAME="$(command uname -a)";
    NVM_VERSION="$(nvm_strip_iojs_prefix "${1-}" | command sed -e 's/^\([0-9]\)/v\1/g')";
    NVM_VERSION_DIR="${3-}";
    NVM_VERSION_DIR_IOJS="$(nvm_version_dir "${NVM_IOJS_PREFIX}")";
    NVM_VERSION_DIR_NEW="$(nvm_version_dir new)";
    NVM_VERSION_DIR_OLD="$(nvm_version_dir old)";
    NVM_WHICH_DIR="${1-}";
    OPTIONS='';
    OUTPUT="$(nvm alias default "${VERSION}")";
    PATH=$PATH:/usr/sbin:/sbin:/usr/local/sbin type $1 &> /dev/null
    PATTERN="${1-}";
    PATTERN="${1-}";
    PATTERN="${1-}";
    PATTERN="${1-}";
    PATTERN="${1-}";
    PATTERN="${1-}";
    PATTERN="${3-}";
    PREFIX='';
    PREFIXED_VERSION="$(nvm_format_version "${VERSION}")";
    PREFIXED_VERSION="${2}";
    PREFIXED_VERSION="${3-}";
    PREFIXED_VERSION="${3-}";
    PROVIDED_VERSION="$1";
    PROVIDED_VERSION="${1-}";
    SANITIZED_PATH="${1-}";
    SEEN_ALIASES="${ALIAS}";
    SLUG="$(nvm_get_download_slug "${FLAVOR}" "${KIND}" "${VERSION}")";
    SORT_COMMAND='command sort';
    STRIPPED_IOJS_VERSION="$(nvm_strip_iojs_prefix "${IOJS_VERSION}")";
    STRIPPED_IOJS_VERSION="$(nvm_strip_iojs_prefix "${NODE_VERSION}")";
    SYSTEM_COLOR=$(nvm_get_colors 2);
    SYSTEM_COLOR=$(nvm_get_colors 2);
    TARBALL="$(PROGRESS_BAR="${PROGRESS_BAR}" nvm_download_artifact "${FLAVOR}" binary "${TYPE-}" "${VERSION}" | command tail -1)";
    TARBALL="$(PROGRESS_BAR="${PROGRESS_BAR}" nvm_download_artifact "${FLAVOR}" source "${TYPE}" "${VERSION}" | command tail -1)" && [ -f "${TARBALL}" ] && TMPDIR="$(dirname "${TARBALL}")/files" && if ! ( command mkdir -p "${TMPDIR}" && command "${tar}" -x${tar_compression_flag}f "${TARBALL}" -C "${TMPDIR}" --strip-components 1 && VERSION_PATH="$(nvm_version_path "${PREFIXED_VERSION}")" && nvm_cd "${TMPDIR}" && nvm_echo '$>'./configure --prefix="${VERSION_PATH}" $ADDITIONAL_PARAMETERS'<' && ./configure --prefix="${VERSION_PATH}" $ADDITIONAL_PARAMETERS && $make -j "${NVM_MAKE_JOBS}" ${MAKE_CXX-} && command rm -f "${VERSION_PATH}" 2> /dev/null && $make -j "${NVM_MAKE_JOBS}" ${MAKE_CXX-} install ); then
    TARBALL="${4}";
    TARBALL="${tmpdir}/${SLUG}.${COMPRESSION}";
    TMPDIR="${5}";
    TYPE="${2-}";
    TYPE="${2-}";
    TYPE="${2-}";
    TYPE="${3-}";
    VERSION="$(nvm_ensure_version_prefix "${1-}")";
    VERSION="$(nvm_ls "${PATTERN}" | command tail -1)";
    VERSION="$(nvm_ls_current)";
    VERSION="$(nvm_resolve_alias "${1-}")";
    VERSION="$(nvm_strip_iojs_prefix "${PREFIXED_VERSION}")";
    VERSION="$(nvm_strip_iojs_prefix "${PREFIXED_VERSION}")";
    VERSION="$1";
    VERSION="$1";
    VERSION="$1";
    VERSION="${1-}";
    VERSION="${1-}";
    VERSION="${1-}";
    VERSION="${2-}";
    VERSION="${3-}";
    VERSION="${3-}";
    VERSION="${3}";
    VERSION="${4}";
    VERSION="${VERSION#v}";
    VERSION="${VERSION%.}";
    VERSIONS="$(nvm_echo "${NVM_LS_REMOTE_PRE_MERGED_OUTPUT}
    VERSIONS="$({ command awk -v lts="${LTS-}" '{
    VERSIONS='';
    VERSION_FORMAT='%s';
    VERSION_LIST="$(nvm_download -L -s "${MIRROR}/index.tab" -o -     | command sed "
    [ "$(nvm deactivate >/dev/null 2>&1 && command -v iojs)" != '' ]
    [ "$(nvm deactivate >/dev/null 2>&1 && command -v node)" != '' ]
    [ "${NVM_NUM_COLORS:--1}" -ge 8 ]
    [ "${pathdir}" = "${tree}" ]
    [ -n "${TMPDIR-}" ] && command mkdir -p "${TMPDIR}" && VERSION_PATH="$(nvm_version_path "${PREFIXED_VERSION}")" || return 1;
    [ -n "${ZSH_VERSION-}" ]
    [ -t 1 ]
    [ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`;
    [ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`;
    [ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`;
    [ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`;
    [ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no;
    [ -z "${ZSH_VERSION-}" ] || [[ -o PROMPT_SUBST ]] || ps1_expanded=no;
    [[ "$(bind -v)" == *$1+([[:space:]])on* ]]
    [[ "$1" == -a || "$2" == -a ]] && options=-a;
    [[ "$1" == -c || "$2" == -c ]] && options+=" -c";
    [[ $# -ge $OPTIND ]] && echo "bash_completion: $FUNCNAME($*): unprocessed arguments:" $(while [[ $# -ge $OPTIND ]]; do printf '%s\n' ${!OPTIND}; shift; done) 1>&2;
    [[ $# -lt $OPTIND ]] && echo "bash_completion: $FUNCNAME: missing mandatory argument CWORD" 1>&2;
    [[ $# -lt 1 ]] && echo "bash_completion: $FUNCNAME: missing mandatory argument CONFIG" 1>&2;
    [[ $EUID -eq 0 || -n ${root_command:-} ]]
    [[ $OSTYPE == *linux* ]] && var=_$var;
    [[ $cur == *@* ]] && user=${cur%@*}@ && cur=${cur#*@};
    [[ $cword -gt 2 ]] && return;
    [[ $cword -le 0 ]] && return 1;
    [[ $userland == $1 ]]
    [[ $userland == @(Linux|GNU/*) ]] && userland=GNU;
    [[ ${!2} == \$* ]] && eval $2=${!2}
    [[ -d /etc/init.d ]] && sysvdirs+=(/etc/init.d);
    [[ -d /etc/rc.d/init.d ]] && sysvdirs+=(/etc/rc.d/init.d);
    [[ -f /etc/slackware-version ]] && sysvdirs=(/etc/rc.d);
    [[ -n "${_xspecs[$cmd]}" ]] && complete -F _filedir_xspec "$cmd" && return 0;
    [[ -n $cmd ]] || return 1;
    [[ -n $fss ]] && COMPREPLY+=($(compgen -W "$fss" -- "$cur"))
    [[ -n $option ]] || return 0;
    [[ -n $vcur ]] && { 
    [[ -n $vcword ]] && { 
    [[ -n $vprev && $cword -ge 1 ]] && { 
    [[ -n $vwords ]] && { 
    [[ -n ${COMP_FILEDIR_FALLBACK:-} && ${#toks[@]} -lt 1 ]] && { 
    [[ -n ${split-} ]] && _split_longopt && split=true;
    \alias "${1-}" > /dev/null 2>&1
    \cd "$@"
    __get_cword_at_cursor_by_ref "$exclude" words cword cur;
    __load_completion "$cmd" && return 124;
    __ltrim_colon_completions "$cur"
    __ltrim_colon_completions "$prefix$user$cur"
    __nvm_generate_completion "$(__nvm_aliases)"
    __nvm_generate_completion "$(nvm_ls) $(__nvm_aliases)"
    __nvm_generate_completion "${OPTIONS}"
    __reassemble_comp_words_by_ref "$1" words cword;
    __reassemble_comp_words_by_ref "$1" words cword;
    __reassemble_comp_words_by_ref "$1" words cword;
    _command
    _command_offset $offset
    _count_args "" "" "$modearg";
    _filedir
    _filedir
    _filedir -d;
    _get_comp_words_by_ref -n "$exclude<>&" cur prev words cword;
    _get_comp_words_by_ref cur;
    _init_completion -n : || return;
    _init_completion -n : || return;
    _init_completion -s || return;
    _init_completion -s || return;
    _init_completion -s || return;
    _init_completion || return;
    _init_completion || return;
    _init_completion || return;
    _init_completion || return;
    _known_hosts_real $options -- "$cur"
    _quote_readline_by_ref "$1" ret;
    _sysvdirs;
    _tilde "$cur" || return;
    _tilde "$cur" || return;
    _variables && return 1;
    alias unalias reinstall-packages
    aliases="";
    arg=;
    args=1;
    b="$branch_color$b$c_clear";
    b=${b##refs/heads/};
    cache deactivate unload
    case "$#" in 
    case "$1" in 
    case "$1" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$upstream_type" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1-}" in 
    case "${1}-${2}" in 
    case "${2-}" in 
    case "${2-}" in 
    case "${FLAVOR}" in 
    case "${FLAVOR}-${TYPE}" in 
    case "${HOST_ARCH}" in 
    case "${NVM_CHECKSUM_BIN-}" in 
    case "${NVM_DELETE_PREFIX}" in 
    case "${NVM_IMPLICIT}" in 
    case "${NVM_OS}" in 
    case "${NVM_OS}" in 
    case "${NVM_UNAME}" in 
    case "${PATTERN}" in 
    case "${PATTERN}" in 
    case "${VERSION}" in 
    case "${prev,,}" in 
    case "${previous_word}" in 
    case "_${NVM_OS}" in 
    case "_${PATTERN}" in 
    case "_${PROVIDED_VERSION}" in 
    case $1 in 
    case $COMMAND in 
    case $PATTERN in 
    case $args in 
    case $prev in 
    case $prev in 
    clang --version | command awk '{ if ($2 == "version") print $3; else if ($3 == "version") print $4 }' | command sed 's/-.*$//g'
    command awk 'BEGIN {
    command awk 'BEGIN {
    command awk 'BEGIN {
    command cat "${NVM_ALIAS_PATH}"
    command mkdir -p "$(nvm_alias_path)/lts";
    command mkdir -p "${NVM_ALIAS_DIR}/lts";
    command mkdir -p "${VERSION_PATH}" || return 1;
    command mkdir -p "${tmpdir}/files" || ( nvm_err "creating directory ${tmpdir}/files failed";
    command printf %b\\n "$*" 2> /dev/null
    command printf %s "${1-}" | command awk -v NVM_DIR="${NVM_DIR}" -v RS=: '
    command printf %s\\n "$*" 2> /dev/null
    command rm -rf "${TMPDIR}";
    complete -F _minimal -- "$cmd" && return 124
    compopt -o filenames;
    configfile=$1;
    cur=${!OPTIND};
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    curl -V 2> /dev/null | nvm_grep "^Features:" | nvm_grep -q "libz"
    curl -V | command awk '{ if ($1 == "curl") print $2 }' | command sed 's/-.*$//g'
    current list ls list-remote ls-remote
    current_word="${COMP_WORDS[COMP_CWORD]}";
    current_word="${COMP_WORDS[COMP_CWORD]}";
    dashoptions='-h --help --save -v --version --tag -w --window';
    dashoptions='-h --help -f --file-bug -u --update-bug -s --symptom \
    declare -F $1 &> /dev/null || { 
    declare aliases;
    declare command;
    declare current_word;
    declare current_word;
    declare previous_word;
    dir="$(nvm_find_up '.nvmrc')";
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    done
    done
    done
    done
    done
    done
    done
    done 2> /dev/null < /etc/shells
    done <<< "$output";
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    echo "$COLOR"
    echo "${aliases} node stable unstable iojs"
    echo "bash_completion: $FUNCNAME: deprecated function," "use _upvars instead" 1>&2;
    echo $syms
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    eval local cmd=$(quote "$1");
    eval local cmd=$(quote "$1");
    eval printf %s "$1" 2> /dev/null
    eval xspec="${xspec}";
    exit(0)
    exit(4)
    exit;
    export AWKLIBPATH="$*:$AWKLIBPATH"
    export AWKLIBPATH="$AWKLIBPATH:$*"
    export AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`
    export AWKPATH="$*:$AWKPATH"
    export AWKPATH="$AWKPATH:$*"
    export AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`
    export NVM_RC_VERSION='';
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi ) | sort;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    for ((i; i <= COMP_CWORD; i++ ))
    for ((i=0; i < $word_offset; i++ ))
    for ((i=0; i <= COMP_CWORD - $word_offset; i++ ))
    for ((i=1; i < ${#words[@]}; 1))
    for ((i=1; i < COMP_CWORD; i++ ))
    for ((i=1; i < cword; i++ ))
    for ((i=1; i <= COMP_CWORD; i++ ))
    for (i=1; i<=3; i++) {
    for (i=1; i<=3; i++) {
    for ALIAS_NAME in "$(nvm_node_prefix)" "stable" "unstable";
    for ALIAS_PATH in "${NVM_ALIAS_DIR}/${ALIAS}"*;
    for ALIAS_PATH in "${NVM_ALIAS_DIR}/lts/${ALIAS}"*;
    for FILE in "$1"/* "$1"/.[!.]* "$1"/..?*;
    for MINOR in $LAST_TWO;
    for dir in "${dirs[@]}";
    for dir in ${XDG_DATA_DIRS:-/usr/local/share:/usr/share};
    for i in "$@";
    for i in "${array[@]}";
    for i in "${config[@]}";
    for i in "${included[@]}";
    for i in ${CDPATH//:/'
    for option in ${GIT_PS1_SHOWUPSTREAM};
    help install uninstall use run exec
    if ! (( $# )); then
    if ! NVM_LS_CURRENT_NODE_PATH="$(command which node 2>/dev/null)"; then
    if ! nvm_echo "$1" | command xargs npm install -g --quiet; then
    if ! nvm_has "npm"; then
    if ! nvm_is_merged_node_version "${VERSION}"; then
    if ! nvm_is_natural_num "${NVM_CPU_CORES}"; then
    if ! nvm_validate_implicit_alias "${NVM_IMPLICIT}"; then
    if (ARGV[1] == "" || ARGV[2] == "") exit(1)
    if (ARGV[1] == "" || ARGV[2] == "") exit(1)
    if (path ~ "^(/versions/[^/]*)?/[^/]*'"${2-}"'.*$") { next }
    if [ ! -e "${NVMRC_PATH}" ]; then
    if [ ! -f "${NVM_ALIAS_DIR}/${ALIAS_NAME}" ] && { 
    if [ ! -f "${NVM_ALIAS_PATH}" ]; then
    if [ "$#" -lt 1 ]; then
    if [ "$#" -lt 3 ]; then
    if [ "$#" -ne 5 ]; then
    if [ "$(expr "${LTS}" : '^lts/-[1-9][0-9]*$')" -gt 0 ]; then
    if [ "$(nvm_get_checksum_alg)" = 'sha-256' ]; then
    if [ "$(uname)" = "Linux" ] && [ "${NVM_ARCH}" = arm64 ] && [ "$(od -An -t x1 -j 4 -N 1 "${L#*-> }")" = ' 01' ]; then
    if [ "$rev_parse_exit_code" = "0" ]; then
    if [ "${#1}" -eq 5 ] && nvm_echo "$1" | nvm_grep -E "^[rRgGbBcCyYmMkKeW]{1,}$" > /dev/null; then
    if [ "${-#*e}" != "$-" ]; then
    if [ "${1-}" = "${NVM_IOJS_PREFIX}" ]; then
    if [ "${ALIAS}" != "${ALIAS#lts/}" ]; then
    if [ "${DEST}" = "${VERSION}" ]; then
    if [ "${EXIT_CODE}" != "0" ] || ! nvm_is_version_installed "${LOCAL_VERSION}"; then
    if [ "${FLAVOR}" = 'node' ]; then
    if [ "${KIND}" = 'binary' ] && ! nvm_binary_available "${VERSION}"; then
    if [ "${KIND}" = 'binary' ]; then
    if [ "${KIND}" = 'binary' ]; then
    if [ "${NODE_VERSION}" = 'system' ]; then
    if [ "${NUM_GROUPS}" -lt 3 ]; then
    if [ "${NVM_ADD_SYSTEM-}" = true ]; then
    if [ "${NVM_ARCH}" = 'armv6l' ] || [ "${NVM_ARCH}" = 'armv7l' ]; then
    if [ "${NVM_DEBUG-}" = 1 ]; then
    if [ "${NVM_NO_PROGRESS-}" = "1" ]; then
    if [ "${NVM_NO_PROGRESS-}" = "1" ]; then
    if [ "${NVM_OS}" = 'aix' ]; then
    if [ "${NVM_OS}" = 'win' ]; then
    if [ "${NVM_OS}" = 'win' ]; then
    if [ "${NVM_SILENT:-0}" -ne 1 ]; then
    if [ "${PATTERN#"${PATTERN%?}"}" = '.' ]; then
    if [ "${PATTERN}" = "current" ]; then
    if [ "${PATTERN}" = 'N/A' ]; then
    if [ "${PATTERN}" = 'current' ]; then
    if [ "${PROVIDED_VERSION}" = 'system' ]; then
    if [ "${VERSION}" = 'N/A' ]; then
    if [ "${nosource-}" = '1' ]; then
    if [ "@${tree}@" = "@@" ] || [ "@${node_path}@" = "@@" ]; then
    if [ "_$(nvm_get_os)" = '_win' ]; then
    if [ "_$1" != "_local" ] && [ "_$1" != "_remote" ]; then
    if [ "_$2" = '_stable' ]; then
    if [ "_${1-}" = "_$(nvm_ls_current)" ]; then
    if [ "_${DEFAULT}" = '_true' ]; then
    if [ "_${NVM_MODE}" = '_install' ]; then
    if [ "_${NVM_OS}" = "_sunos" ]; then
    if [ "_${NVM_OS}" = '_darwin' ]; then
    if [ "_${NVM_OS}" = '_win' ]; then
    if [ "_${SANITIZED_PATH}" != "_${HOME}" ]; then
    if [ "_${SANITIZED_PATH}" != "_${NVM_DIR}" ]; then
    if [ "_${STRIPPED_IOJS_VERSION}" != "_${NODE_VERSION}" ]; then
    if [ "_${STRIPPED_IOJS_VERSION}" = "${IOJS_VERSION}" ]; then
    if [ "_${VERSION}" != '_∞' ]; then
    if [ "true" = "$inside_gitdir" ]; then
    if [ "true" = "$inside_worktree" ] && [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] && [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] && git check-ignore -q .; then
    if [ $NVM_IS_0_6 -eq 1 ]; then
    if [ $NVM_IS_0_9 -eq 1 ] || [ $NVM_IS_0_6 -eq 1 ]; then
    if [ $NVM_PATTERN_STARTS_WITH_V = true ] && [ "_$(nvm_num_version_groups "${PATTERN}")" = "_3" ]; then
    if [ $detached = no ]; then
    if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
    if [ $pcmode = yes ]; then
    if [ ${#COMP_WORDS[@]} == 4 ]; then
    if [ -d "$g/rebase-merge" ]; then
    if [ -d "${NVM_DIR}/alias" ]; then
    if [ -e "${dir}/.nvmrc" ]; then
    if [ -f "${NVM_DEFAULT_PACKAGE_FILE}" ]; then
    if [ -f "${TARBALL}" ]; then
    if [ -n "$c" ]; then
    if [ -n "$i" ]; then
    if [ -n "$s" ]; then
    if [ -n "$step" ] && [ -n "$total" ]; then
    if [ -n "$u" ]; then
    if [ -n "$w" ]; then
    if [ -n "${ADDITIONAL_PARAMETERS}" ]; then
    if [ -n "${ALIAS}" ] && [ "_${ALIAS}" != "_${PATTERN}" ]; then
    if [ -n "${DEST}" ]; then
    if [ -n "${DEST}" ]; then
    if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
    if [ -n "${LTS-}" ]; then
    if [ -n "${NVM_COLORS-}" ]; then
    if [ -n "${NVM_LTS-}" ]; then
    if [ -n "${NVM_NPMRC}" ] && [ -f "${NVM_NPMRC}" ] && nvm_grep -Ee '^(prefix|globalconfig) *=' < "${NVM_NPMRC}" > /dev/null; then
    if [ -n "${NVM_NPM_CONFIG_x_PREFIX_ENV-}" ]; then
    if [ -n "${NVM_VERSION_ONLY-}" ]; then
    if [ -n "${PATTERN}" ] && [ "${PATTERN}" != '*' ]; then
    if [ -n "${PREFIX-}" ] && [ "$(nvm_version_path "$(node -v)")" != "${PREFIX}" ]; then
    if [ -n "${TMPDIR-}" ]; then
    if [ -r "${TARBALL}" ]; then
    if [ -r /usr/share/apport/symptoms ]; then
    if [ -x "$(nvm_version_path "$1" 2>/dev/null)/bin/${NVM_NODE_BINARY}" ]; then
    if [ -x /usr/lib/command-not-found ]; then
    if [ -z "$1" ]; then
    if [ -z "$1" ]; then
    if [ -z "$repo_info" ]; then
    if [ -z "${1-}" ]; then
    if [ -z "${1-}" ]; then
    if [ -z "${1-}" ]; then
    if [ -z "${1-}" ]; then
    if [ -z "${1-}" ]; then
    if [ -z "${ALIAS_PATH}" ]; then
    if [ -z "${ALIAS}" ]; then
    if [ -z "${ALIAS}" ]; then
    if [ -z "${ALIAS}" ]; then
    if [ -z "${ALIAS}" ]; then
    if [ -z "${CHECKSUM}" ]; then
    if [ -z "${COMPUTED_SUM}" ]; then
    if [ -z "${FILE}" ]; then
    if [ -z "${FILE}" ]; then
    if [ -z "${GIT_PS1_COMPRESSSPARSESTATE-}" ] && [ -z "${GIT_PS1_OMITSPARSESTATE-}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
    if [ -z "${MINOR}" ]; then
    if [ -z "${MIRROR}" ]; then
    if [ -z "${MIRROR}" ]; then
    if [ -z "${MIRROR}" ]; then
    if [ -z "${NODE_VERSION}" ]; then
    if [ -z "${NPM_VERSION}" ]; then
    if [ -z "${NVM_ALIAS_DIR}" ]; then
    if [ -z "${NVM_COMMAND}" ] || [ -z "${NVM_VERSION_DIR}" ]; then
    if [ -z "${NVM_DIR-}" ]; then
    if [ -z "${NVM_FLAVOR-}" ] || [ "${NVM_FLAVOR-}" = "${NVM_NODE_PREFIX}" ]; then
    if [ -z "${NVM_LATEST_URL}" ]; then
    if [ -z "${NVM_LTS-}" ] && { 
    if [ -z "${NVM_NO_COLORS-}" ] && nvm_has_colors; then
    if [ -z "${NVM_NO_COLORS}" ] && nvm_has_colors; then
    if [ -z "${NVM_OS}" ]; then
    if [ -z "${NVM_RC_VERSION}" ]; then
    if [ -z "${NVM_WHICH_DIR}" ] || [ "${NVM_WHICH_DIR}" = "new" ]; then
    if [ -z "${PATTERN}" ]; then
    if [ -z "${PREFIXED_VERSION}" ]; then
    if [ -z "${PREFIXED_VERSION}" ]; then
    if [ -z "${VERSIONS}" ]; then
    if [ -z "${VERSIONS}" ]; then
    if [ -z "${VERSIONS}" ]; then
    if [ -z "${VERSION}" ] || [ "_${VERSION}" = "_N/A" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [ -z "${VERSION}" ]; then
    if [[ "$1" == *:* && "$COMP_WORDBREAKS" == *:* ]]; then
    if [[ "$1" == -d ]]; then
    if [[ "$1" == -s ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == --?*=* ]]; then
    if [[ "$cur" == \~*/* ]]; then
    if [[ "${GIT_PS1_SHOWCONFLICTSTATE}" == "yes" ]] && [[ -n $(git ls-files --unmerged 2>/dev/null) ]]; then
    if [[ $1 == \~* && $1 != */* ]]; then
    if [[ $BASH_SOURCE == */* ]]; then
    if [[ $COMP_CWORD -eq 0 ]]; then
    if [[ $COMP_CWORD -ge 1 ]]; then
    if [[ $cur == $redir* || $prev == $redir ]]; then
    if [[ $cur == *@* ]]; then
    if [[ $cur == *\\\\* || $cur == *:*:* ]]; then
    if [[ $cur == -* && $cur != $modearg ]]; then
    if [[ $cur == -* ]]; then
    if [[ $cur =~ ^(\$(\{[!#]?)?)([A-Za-z0-9_]*)$ ]]; then
    if [[ $cword -eq 1 && $prev == ?(*/)service ]]; then
    if [[ $index -gt 0 && ( -n $lead && -n ${lead//[[:space:]]} ) ]]; then
    if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
    if [[ $xspec == !* ]]; then
    if [[ ${!1} == \~* ]]; then
    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
    if [[ ${#config[@]} -gt 0 && -n "$aliases" ]]; then
    if [[ ${#config[@]} -gt 0 ]]; then
    if [[ ${#kh[@]} -gt 0 || ${#khd[@]} -gt 0 ]]; then
    if [[ ${#toks[@]} -ne 0 ]]; then
    if [[ ${#toks[@]} -ne 0 ]]; then
    if [[ -d $xinetddir ]]; then
    if [[ -e /proc/filesystems ]]; then
    if [[ -f /etc/debian_version ]]; then
    if [[ -n $1 ]]; then
    if [[ -n $configfile ]]; then
    if [[ -n $exclude ]]; then
    if [[ -n $ipv4 ]]; then
    if [[ -n $ipv4 || -n $ipv6 ]]; then
    if [[ -n $ipv6 ]]; then
    if [[ -n ${2//[^0-9]/} ]]; then
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_AVAHI:-} ]] && type avahi-browse &> /dev/null; then
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_HOSTFILE-1} ]]; then
    if [[ -n ${ZSH_VERSION-} ]]; then
    if [[ -x /sbin/upstart-udev-bridge ]]; then
    if [[ -z "$legacy" ]]; then
    if [[ -z "$verbose" ]]; then
    if [[ -z "${CDPATH:-}" || "$cur" == ?(.)?(.)/* ]]; then
    if [[ -z $configfile ]]; then
    if _complete_as_root; then
    if _complete_as_root; then
    if nvm_grep '404 Not Found' "${TARBALL}" > /dev/null; then
    if nvm_has "clang++" && nvm_has "clang" && nvm_version_greater_than_or_equal_to "$(nvm_clang_version)" 3.5; then
    if nvm_has "curl"; then
    if nvm_has "curl"; then
    if nvm_has "npm"; then
    if nvm_has tput; then
    if nvm_has_non_aliased "sha256sum"; then
    if nvm_has_non_aliased 'sha256sum'; then
    if nvm_install_binary_extract "${NVM_OS}" "${PREFIXED_VERSION}" "${VERSION}" "${TARBALL}" "${TMPDIR}"; then
    if nvm_is_iojs_version "${1-}"; then
    if nvm_is_merged_node_version "${1}"; then
    if nvm_is_merged_node_version "${VERSION}"; then
    if nvm_is_natural_num "${1-}"; then
    if nvm_npmrc_bad_news_bears "${NVM_NPM_BUILTIN_NPMRC}"; then
    if nvm_npmrc_bad_news_bears "${NVM_NPM_GLOBAL_NPMRC}"; then
    if nvm_npmrc_bad_news_bears "${NVM_NPM_PROJECT_NPMRC}"; then
    if nvm_npmrc_bad_news_bears "${NVM_NPM_USER_NPMRC}"; then
    if nvm_supports_xz "${VERSION}"; then
    if nvm_validate_implicit_alias "${1-}" 2> /dev/null; then
    if nvm_validate_implicit_alias "${PATTERN-}" 2> /dev/null; then
    if nvm_validate_implicit_alias "${PATTERN}" 2> /dev/null; then
    if nvm_validate_implicit_alias "${PATTERN}" 2> /dev/null; then
    if nvm_validate_implicit_alias "${PATTERN}" 2> /dev/null; then
    if nvm_version_greater '16.0.0' "${VERSION}"; then
    if nvm_version_greater_than_or_equal_to "${1}" "0.10.42" && nvm_version_greater "0.11.0" "${1}"; then
    if nvm_version_greater_than_or_equal_to "${1}" "0.12.10" && nvm_version_greater "0.13.0" "${1}"; then
    if nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 0.6.0 && nvm_version_greater 0.7.0 "${NODE_VERSION}"; then
    if nvm_version_greater_than_or_equal_to "${NODE_VERSION}" 0.9.0 && nvm_version_greater 0.10.0 "${NODE_VERSION}"; then
    if nvm_version_greater_than_or_equal_to "${VERSION}" 0.1.14; then
    if test -f "$g/CHERRY_PICK_HEAD"; then
    if type "${COMMAND}" | nvm_grep -q hashed; then
    if type getent &> /dev/null; then
    if type getent &> /dev/null; then
    if unset -v "$1"; then
    install-latest-npm
    kh=();
    local "$2" "$3" "$4" && _upvars -a${#words[@]} $2 "${words[@]}" -v $3 "$cword" -v $4 "${cur:0:$index}"
    local -a array=($1);
    local -a dirs=(${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions);
    local -a kh tmpkh khd config;
    local -a procs;
    local -a sigs=($(compgen -P "$1" -A signal "SIG${cur#$1}"));
    local -a toks;
    local -a toks;
    local -r mark_dirs=$(_rl_enabled mark-directories && echo y);
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y);
    local ADDITIONAL_PARAMETERS;
    local ADDITIONAL_PARAMETERS;
    local ALIAS;
    local ALIAS;
    local ALIAS;
    local ALIAS;
    local ALIAS;
    local ALIAS;
    local ALIAS;
    local ALIAS_FORMAT;
    local ALIAS_PATH;
    local ALIAS_TEMP;
    local ARROW;
    local CHECKSUM;
    local CHECKSUM;
    local COLOR;
    local COMMAND;
    local COMMAND;
    local COMPRESSION;
    local COMPRESSION;
    local COMPUTED_SUM;
    local CURL_COMPRESSED_FLAG;
    local CURL_COMPRESSED_FLAG;
    local CURRENT_COLOR;
    local CURRENT_COLOR;
    local DEFAULT_COLOR;
    local DEFAULT_COLOR;
    local DEFAULT_IFS;
    local DEST;
    local DEST;
    local DEST;
    local DEST_FORMAT;
    local EXIT_CODE;
    local EXIT_CODE;
    local EXIT_CODE;
    local EXIT_CODE;
    local FILE;
    local FILE;
    local FLAVOR;
    local FLAVOR;
    local FLAVOR;
    local FLAVOR;
    local FLAVOR;
    local FLAVOR;
    local FORMAT;
    local HOST_ARCH;
    local IFS='
    local IFS='
    local IFS='
    local IFS=' 	
    local INFO;
    local INSTALLED_COLOR;
    local INSTALLED_COLOR;
    local INSTALLS;
    local IOJS_VERSION;
    local KIND;
    local KIND;
    local LAST_TWO;
    local LC_CTYPE=C;
    local LINKS;
    local LOCAL_VERSION;
    local LTS;
    local LTS;
    local LTS;
    local LTS_ALIAS;
    local LTS_COLOR;
    local LTS_COLOR;
    local LTS_FORMAT;
    local LTS_LENGTH;
    local LTS_VERSION;
    local MAKE_CXX;
    local MINOR;
    local MINOR;
    local MIRROR;
    local MIRROR;
    local MIRROR;
    local MOD;
    local NEWLINE;
    local NODE_OR_IOJS;
    local NODE_VERSION;
    local NODE_VERSION;
    local NORMALIZED_VERSION;
    local NOT_INSTALLED_COLOR;
    local NOT_INSTALLED_COLOR;
    local NPMLIST;
    local NPM_VERSION;
    local NUM_GROUPS;
    local NVMRC_PATH;
    local NVM_ADD_PREFIX_COMMAND;
    local NVM_ALIAS_DIR;
    local NVM_ALIAS_DIR;
    local NVM_ALIAS_PATH;
    local NVM_ARCH;
    local NVM_ARCH;
    local NVM_ARCH;
    local NVM_AUTO_MODE;
    local NVM_CHECKSUM_BIN;
    local NVM_COMMAND;
    local NVM_COMMAND;
    local NVM_CPU_CORES;
    local NVM_CURRENT;
    local NVM_CURRENT;
    local NVM_CURRENT;
    local NVM_DEFAULT_PACKAGE_FILE="${NVM_DIR}/default-packages";
    local NVM_DELETE_PREFIX;
    local NVM_FLAVOR;
    local NVM_HAS_COLORS;
    local NVM_IMPLICIT;
    local NVM_IOJS_PREFIX;
    local NVM_IOJS_PREFIX;
    local NVM_IOJS_PREFIX;
    local NVM_IOJS_PREFIX;
    local NVM_IOJS_PREFIX;
    local NVM_IOJS_PREFIX;
    local NVM_IS_0_6;
    local NVM_IS_0_9;
    local NVM_LATEST_LTS_COLOR;
    local NVM_LATEST_URL;
    local NVM_LS_CURRENT_NODE_PATH;
    local NVM_LS_REMOTE_EXIT_CODE;
    local NVM_LS_REMOTE_IOJS_EXIT_CODE;
    local NVM_LS_REMOTE_IOJS_OUTPUT;
    local NVM_LS_REMOTE_POST_MERGED_OUTPUT;
    local NVM_LS_REMOTE_PRE_MERGED_OUTPUT;
    local NVM_MAKE_JOBS;
    local NVM_MODE;
    local NVM_NODE_BINARY;
    local NVM_NODE_PREFIX;
    local NVM_NODE_PREFIX;
    local NVM_NODE_PREFIX;
    local NVM_NODE_PREFIX;
    local NVM_NODE_PREFIX;
    local NVM_NPMRC;
    local NVM_NPM_BUILTIN_NPMRC;
    local NVM_NPM_CMD;
    local NVM_NPM_CONFIG_x_PREFIX_ENV;
    local NVM_NPM_GLOBAL_NPMRC;
    local NVM_NPM_PROJECT_NPMRC;
    local NVM_NPM_USER_NPMRC;
    local NVM_NUM_COLORS;
    local NVM_NUM_DOTS;
    local NVM_NUM_GROUPS;
    local NVM_OLD_LTS_COLOR;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_OS;
    local NVM_PATTERN_STARTS_WITH_V;
    local NVM_UNAME;
    local NVM_VERSION;
    local NVM_VERSION_DIR;
    local NVM_VERSION_DIR;
    local NVM_VERSION_DIR_IOJS;
    local NVM_VERSION_DIR_NEW;
    local NVM_VERSION_DIR_OLD;
    local NVM_WHICH_DIR;
    local OIFS=$IFS IFS=: dir cmd="${1##*/}" compfile;
    local OPTIND=1;
    local OUTPUT;
    local PATH="$PATH:/sbin:/usr/sbin";
    local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin;
    local PATH=$PATH:/sbin;
    local PATH=$PATH:/sbin;
    local PATTERN;
    local PATTERN;
    local PATTERN;
    local PATTERN;
    local PATTERN;
    local PATTERN;
    local PATTERN;
    local PREFIX;
    local PREFIXED_VERSION;
    local PREFIXED_VERSION;
    local PREFIXED_VERSION;
    local PREFIXED_VERSION;
    local PROGRESS_BAR;
    local PROVIDED_VERSION;
    local PROVIDED_VERSION;
    local SANITIZED_PATH;
    local SEEN_ALIASES;
    local SHASUMS_URL;
    local SLUG;
    local SORT_COMMAND;
    local STABLE;
    local STRIPPED_IOJS_VERSION;
    local STRIPPED_IOJS_VERSION;
    local SYSTEM_COLOR;
    local SYSTEM_COLOR;
    local SYS_COLOR;
    local TARBALL;
    local TARBALL;
    local TARBALL;
    local TARBALL;
    local TARBALL_URL;
    local TMPDIR;
    local TMPDIR;
    local TMPDIR;
    local TYPE;
    local TYPE;
    local TYPE;
    local TYPE;
    local UNSTABLE;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION;
    local VERSION="${1-}";
    local VERSIONS;
    local VERSIONS;
    local VERSION_FORMAT;
    local VERSION_LIST;
    local VERSION_PATH;
    local VERSION_PATH;
    local addrs=$({ LC_ALL=C ifconfig -a || ip addr show; } 2>/dev/null |
    local args;
    local b="";
    local bad_color=$c_red;
    local bare_repo="${repo_info##*
    local branch_color="";
    local c="";
    local cmd="${1:-_EmptycmD_}";
    local configfile flag prefix OIFS=$IFS;
    local configfile i f;
    local conflict="";
    local cur cword words=();
    local cur dashoptions prev param;
    local cur dashoptions prev param;
    local cur prev words cword split;
    local cur prev words cword split;
    local cur prev words cword split;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev;
    local cur prev;
    local cur user suffix aliases i host ipv4 ipv6;
    local cur;
    local cword words;
    local cword words=();
    local detached=no;
    local dir;
    local exclude flag i OPTIND=1;
    local exclude i j line ref;
    local exclude="" flag outx errx inx OPTIND=1;
    local exit=$?;
    local f="$h$w$i$s$u$p";
    local flags_color="$c_lblue";
    local fss;
    local g="${repo_info%
    local gitstring="$c$b${f:+$z$f}${sparse}$r${upstream}${conflict}";
    local h="";
    local i cur index=$COMP_POINT lead=${COMP_LINE:0:$COMP_POINT};
    local i cword words;
    local i skip;
    local i;
    local i;
    local i="";
    local included=($(command sed -ne 's/^[[:blank:]]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee][[:blank:]]\{1,\}\([^#%]*\)\(#.*\)\{0,1\}$/\1/p' "${configfile}"));
    local inside_gitdir="${repo_info##*
    local inside_worktree="${repo_info##*
    local key value;
    local line match option i char;
    local line;
    local make;
    local matchop=!;
    local modearg="-@(@(+([rwxXst])|[ugo])|+([0-7]))";
    local modpath;
    local n;
    local n=$(getconf $var 2>/dev/null);
    local node_path;
    local nosource;
    local offset i;
    local ok_color=$c_green;
    local option option2 i IFS=' 	
    local option;
    local options;
    local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')";
    local p="";
    local param;
    local path_;
    local path_;
    local pathdir;
    local pcmode=no;
    local previous_pathdir;
    local printf_format=' (%s)';
    local ps1_expanded=yes;
    local ps1pc_end='\$ ';
    local ps1pc_start='\u@\h:\w ';
    local quoted;
    local quoted=${1//\'/\'\\\'\'};
    local r="";
    local re='\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}';
    local redir="@(?([0-9])<|?([0-9&])>?(>)|>&)";
    local repo_info rev_parse_exit_code;
    local reset;
    local result=0;
    local root_command=$1;
    local s="";
    local shell rest;
    local short_sha="";
    local sparse="";
    local srcfile=$1;
    local step="";
    local svn_remote svn_url_pattern count n;
    local syms;
    local sysvdirs;
    local tar;
    local tar_compression_flag;
    local tmpdir;
    local todo;
    local total="";
    local tree;
    local u="";
    local upargs=() upvars=() vcur vcword vprev vwords;
    local upstream="";
    local upstream_type=git legacy="" verbose="" name="";
    local userland=$(uname -s);
    local var=NPROCESSORS_ONLN;
    local w="";
    local word_offset=$1 i j;
    local xinetddir=/etc/xinetd.d;
    local z="${GIT_PS1_STATESEPARATOR-" "}";
    make='make';
    modpath=/lib/modules/$1;
    node_path="${2-}";
    nosource="${4-}";
    nvm use "$@"
    nvm_auto "${NVM_AUTO_MODE}"
    nvm_compare_checksum "${TARBALL}" "${CHECKSUM}" || ( command rm -rf "${tmpdir}/files";
    nvm_curl_libz_support && nvm_version_greater_than_or_equal_to "$(nvm_curl_version)" 7.21.0
    nvm_download -L -C - "${PROGRESS_BAR}" "${TARBALL_URL}" -o "${TARBALL}" || ( command rm -rf "${TARBALL}" "${tmpdir}";
    nvm_download -L -s "${SHASUMS_URL}" -o - | command awk "{ if (\"${4}.${5}\" == \$2) print \$1}"
    nvm_echo "$(nvm_iojs_prefix)-$(nvm_ensure_version_prefix "$(nvm_strip_iojs_prefix "${1-}")")"
    nvm_echo "$(nvm_version_dir old)/alias"
    nvm_echo "$@" 1>&2
    nvm_echo "${#NVM_NUM_GROUPS}"
    nvm_echo "${1-}" | command sed '1!G;h;$!d' | command awk '{ if ($2 && $3 && $3 == "*") { print $1, "(Latest LTS: " $2 ")" } else if ($2) { print $1, "(LTS: " $2 ")" } else { print $1 } }' | command sed '1!G;h;$!d' | while read -r VERSION_LINE; do
    nvm_echo "${COMPRESSION}"
    nvm_echo "${INFO}"
    nvm_echo "${INSTALLS} //// ${LINKS}"
    nvm_echo "${MINOR}"
    nvm_echo "${NVM_ARCH}"
    nvm_echo "${NVM_DIR}/.cache"
    nvm_echo "${NVM_LATEST_URL##*/}"
    nvm_echo "${NVM_OS-}"
    nvm_echo "${SANITIZED_PATH}"
    nvm_echo "${TARBALL}"
    nvm_echo "${VERSIONS}"
    nvm_echo "${VERSIONS}"
    nvm_echo "${VERSIONS}" | command sed 's/ *$//g';
    nvm_echo "${VERSION}"
    nvm_echo "${VERSION}" | tee "$(nvm_alias_path)/${ALIAS}" > /dev/null
    nvm_echo "${path_}"
    nvm_echo "${path_}"
    nvm_echo "* npm upgraded to: v$(npm --version 2>/dev/null)"
    nvm_echo "Creating default alias: ${OUTPUT}";
    nvm_echo "Downloading and installing ${NODE_OR_IOJS-} ${VERSION}...";
    nvm_echo "Installing default global packages from ${NVM_DIR}/default-packages...";
    nvm_echo "npm install -g --quiet $1";
    nvm_echo 'Attempting to upgrade to the latest working version of npm...';
    nvm_echo 'iojs'
    nvm_echo 'node'
    nvm_echo_with_colors "$@" 1>&2
    nvm_err "Binary download from ${TARBALL_URL} failed, trying source.";
    nvm_err "Downloading ${TARBALL_URL}...";
    nvm_err 'Binary download failed, trying source.';
    nvm_err 'Checksums matched!'
    nvm_has "${1-}" && ! nvm_is_alias "${1-}"
    nvm_is_zsh && setopt local_options nonomatch;
    nvm_is_zsh && setopt local_options shwordsplit;
    nvm_is_zsh && setopt local_options shwordsplit;
    nvm_is_zsh && setopt local_options shwordsplit;
    nvm_is_zsh && unsetopt local_options nomatch;
    nvm_version_greater_than_or_equal_to "$(nvm_strip_iojs_prefix "${1-}")" v0.8.6
    nvm_version_greater_than_or_equal_to "$1" v4.0.0
    nvm_version_greater_than_or_equal_to "${NODE_VERSION}" v0.8.6 && ! nvm_version_greater_than_or_equal_to "${NODE_VERSION}" v1.0.0
    nvm_version_greater_than_or_equal_to "${STRIPPED_IOJS_VERSION}" v3.3.1
    offset=1;
    option=${option%%[<{().[]*};
    option=;
    param="$dashoptions            $( apt-cache pkgnames $cur 2> /dev/null )            $( command ps axo pid | sed 1d )            $( _apport_symptoms )            $( compgen -G "${cur}*" )";
    path = substr($0, length(NVM_DIR) + 1)
    path_="${PWD}";
    path_="${PWD}";
    pathdir=$(dirname "${previous_pathdir}");
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${words[cword-1]};
    previous_pathdir="${node_path}";
    previous_word="${COMP_WORDS[COMP_CWORD - 1]}";
    printf "%d%06d%06d\n", a[1], a[2], a[3];
    printf "'%s'" "$quoted"
    printf %s "$ret"
    printf %s ${n:-1}
    printf '%s\n' "${option/=*/=}"
    printf -v "$3" %s "$COMP_CWORD";
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir 		--is-bare-repository --is-inside-work-tree 		--short HEAD 2>/dev/null)";
    repo_info="${repo_info%
    repo_info="${repo_info%
    return
    return
    return $?
    return $?
    return $EXIT_CODE
    return $NVM_LS_REMOTE_EXIT_CODE || $NVM_LS_REMOTE_IOJS_EXIT_CODE
    return $exit
    return $result
    return 0
    return 0
    return 0
    return 0
    return 0
    return 0
    return 1
    return 1
    return 1
    return 1
    return 1
    return 1
    return 1
    return 1
    return 2
    return 3 );
    return 4 );
    return 6 );
    rev_parse_exit_code="$?";
    set -- "$@";
    shift;
    shift;
    shopt -s nullglob;
    split(ARGV[1], a, /\./);
    split(ARGV[1], a, /\./);
    split(ARGV[1], a, /\./);
    split(ARGV[2], b, /\./);
    split(ARGV[2], b, /\./);
    svn_remote=();
    sysvdirs=();
    tar='tar';
    tar_compression_flag='z';
    test -r "$1" && IFS='
    toks+=($(
    toks=($(
    tree="${1-}";
    type "${1-}" > /dev/null 2>&1
    type -P "$1" > /dev/null && { 
    unset AWKLIBPATH;
    unset AWKPATH;
    version version-remote which';
    wait ) | sort;
    wait ) | sort;
    wait;
    while (( $# )); do
    while [ "$#" -ne 0 ]; do
    while [ "${path_}" != "" ] && [ ! -f "${path_}/${1-}" ]; do
    while [ "${path_}" != "" ] && [ ! -f "${path_}/package.json" ] && [ ! -d "${path_}/node_modules" ]; do
    while [ "${pathdir}" != '' ] && [ "${pathdir}" != '.' ] && [ "${pathdir}" != '/' ] && [ "${pathdir}" != "${tree}" ] && [ "${pathdir}" != "${previous_pathdir}" ]; do
    while [[ $# -ge $OPTIND ]]; do
    while getopts "ac46F:p:" flag "$@"; do
    while getopts "c:i:n:p:w:" flag "$@"; do
    while getopts "n:e:o:i:s" flag "$@"; do
    while read -r key value; do
    while read -r shell rest; do
    while true; do
    xspec="$matchop($xspec|${xspec^^})";
    { 
    { 
    { 
    }
    }
    }
    } 2>/dev/null | awk         '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { print $2 } else { print $1 } }'));
    } 2>/dev/null)" -- "$cur"))
    } <<EOF
    } | while read -r line; do
    } | while read -r line; do
    }' "${VERSION}";
    };
    };
    };
    };
    };
    };
    }; then
    }; then
  index($0, NVM_DIR) == 1 {
  { print }' | command paste -s -d: -
  }
  }' "${1#v}"
  }' "${1#v}" "${2#v}"
  }' "${1#v}" "${2#v}"
 ';
 ';
";
$VERSION_LIST
$VERSION_LIST
${NVM_LS_REMOTE_IOJS_OUTPUT}
${NVM_LS_REMOTE_POST_MERGED_OUTPUT}" | nvm_grep -v "N/A" | command sed '/^ *$/d')";
'
'
' i j k;
' j;
' read -r "$2" < "$1"
' reset=$(shopt -p nullglob);
' reset=$(shopt -p nullglob);
' xspec=${_xspecs[${1##*/}]} tmp;
';
';
';
';
';
';
';
';
';
';
';
';
';
'};
)";
*}";
*}";
*}";
*}";
,/|';
BASH=/bin/bash
BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:globasciiranges:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath
BASH_ALIASES=()
BASH_ARGC=([0]="0")
BASH_ARGV=()
BASH_CMDS=()
BASH_COMPLETION_VERSINFO=([0]="2" [1]="10")
BASH_LINENO=()
BASH_REMATCH=()
BASH_SOURCE=()
BASH_VERSINFO=([0]="5" [1]="0" [2]="17" [3]="1" [4]="release" [5]="x86_64-pc-linux-gnu")
BASH_VERSION='5.0.17(1)-release'
COLUMNS=168
COMP_WORDBREAKS=$' \t\n"\'><=;|&(:'
DIRSTACK=()
EOF
EOF
EUID=1000
GROUPS=()
HISTCONTROL=ignoreboth
HISTFILE=/home/lucy_wangui/.bash_history
HISTFILESIZE=2000
HISTSIZE=1000
HOME=/home/lucy_wangui
HOSTNAME=DESKTOP-69P06FS
HOSTTYPE=x86_64
IFS=$' \t\n'
LANG=C.UTF-8
LESSCLOSE='/usr/bin/lesspipe %s %s'
LESSOPEN='| /usr/bin/lesspipe %s'
LINES=44
LOGNAME=lucy_wangui
LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
MACHTYPE=x86_64-pc-linux-gnu
MAILCHECK=60
MOTD_SHOWN=update-motd
NAME=DESKTOP-69P06FS
NVM_BIN=/home/lucy_wangui/.nvm/versions/node/v16.16.0/bin
NVM_CD_FLAGS=
NVM_DIR=/home/lucy_wangui/.nvm
NVM_INC=/home/lucy_wangui/.nvm/versions/node/v16.16.0/include/node
OLDPWD=/home/lucy_wangui/alx-system_engineering-devops/0x02-shell_redirections
OPTERR=1
OPTIND=1
OSTYPE=linux-gnu
PATH='/home/lucy_wangui/.local/bin:/home/lucy_wangui/.nvm/versions/node/v16.16.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/c/Program Files/WindowsApps/CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2022.8.0_x64__79rhkp1fndgsc:/mnt/c/Program Files/Python312/Scripts/:/mnt/c/Program Files/Python312/:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/Users/Jones/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/Jones/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin:home/lucy_wangui/.local/bin'
PIPESTATUS=([0]="2" [1]="1" [2]="0")
PPID=7
PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
PS2='> '
PS4='+ '
PWD=/home/lucy_wangui/alx-system_engineering-devops/0x03-shell_variables_expansions
SHELL=/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
SHLVL=1
SHOW=--show-only
TERM=xterm-256color
UID=1000
USER=lucy_wangui
WSLENV=
WSL_DISTRO_NAME=Ubuntu-20.04
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop
_=diff
__expand_tilde_by_ref () 
__get_cword_at_cursor_by_ref () 
__git_eread () 
__git_printf_supports_v=yes
__git_ps1 () 
__git_ps1_colorize_gitstring () 
__git_ps1_show_upstream () 
__git_sequencer_status () 
__load_completion () 
__ltrim_colon_completions () 
__nvm () 
__nvm_alias () 
__nvm_aliases () 
__nvm_commands () 
__nvm_generate_completion () 
__nvm_installed_nodes () 
__nvm_options () 
__parse_options () 
__reassemble_comp_words_by_ref () 
_allowed_groups () 
_allowed_users () 
_apport-bug () 
_apport-cli () 
_apport-collect () 
_apport-unpack () 
_apport_parameterless () 
_apport_symptoms () 
_available_interfaces () 
_backup_glob='@(#*#|*@(~|.@(bak|orig|rej|swp|dpkg*|rpm@(orig|new|save))))'
_cd () 
_cd_devices () 
_chmod () 
_command () 
_command_offset () 
_complete_as_root () 
_completion_loader () 
_configured_interfaces () 
_count_args () 
_dvd_devices () 
_expand () 
_file () 
_filedir () 
_filedir_xspec () 
_fstypes () 
_get_comp_words_by_ref () 
_get_cword () 
_get_first_arg () 
_get_pword () 
_gids () 
_have () 
_included_ssh_config_files () 
_init_completion () 
_installed_modules () 
_ip_addresses () 
_kernel_versions () 
_known_hosts () 
_known_hosts_real () 
_longopt () 
_mac_addresses () 
_minimal () 
_modules () 
_ncpus () 
_parse_help () 
_parse_usage () 
_pci_ids () 
_pgids () 
_pids () 
_pnames () 
_quote_readline_by_ref () 
_realcommand () 
_rl_enabled () 
_root_command () 
_service () 
_services () 
_shells () 
_signals () 
_split_longopt () 
_sysvdirs () 
_terms () 
_tilde () 
_uids () 
_upvar () 
_upvars () 
_usb_ids () 
_user_at_host () 
_usergroup () 
_userland () 
_variables () 
_xfunc () 
_xinetd_services () 
_xspecs=([lokalize]="!*.po" [acroread]="!*.[pf]df" [lbzcat]="!*.?(t)bz?(2)" [mpg321]="!*.mp3" [bzcat]="!*.?(t)bz?(2)" [oocalc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [tex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [unlzma]="!*.@(tlz|lzma)" [sxemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [aviplay]="!*.@(avi|asf|wmv)" [lbunzip2]="!*.?(t)bz?(2)" [dragon]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [freeamp]="!*.@(mp3|og[ag]|pls|m3u)" [rgvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [ooimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [gqmpeg]="!*.@(mp3|og[ag]|pls|m3u)" [texi2html]="!*.texi*" [hbpp]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [lowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [qiv]="!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|svg)" [xanim]="!*.@(mpg|mpeg|avi|mov|qt)" [ps2pdfwr]="!*.@(?(e)ps|pdf)" [harbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [jadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [dvitype]="!*.dvi" [lobase]="!*.odb" [rpm2cpio]="!*.[rs]pm" [xine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [lualatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [localc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [hbrun]="!*.[Hh][Rr][Bb]" [amaya]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [gv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [unpigz]="!*.@(Z|[gGdz]z|t[ag]z)" [mozilla]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [epdfview]="!*.pdf" [dvips]="!*.dvi" [pdfunite]="!*.pdf" [ps2pdf14]="!*.@(?(e)ps|pdf)" [kid3]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [vi]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [ps2pdf]="!*.@(?(e)ps|pdf)" [gpdf]="!*.[pf]df" [lilypond]="!*.ly" [texi2dvi]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [modplug123]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [znew]="*.Z" [ps2pdf13]="!*.@(?(e)ps|pdf)" [ps2pdf12]="!*.@(?(e)ps|pdf)" [kwrite]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [latex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [kate]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [pbzcat]="!*.?(t)bz?(2)" [poedit]="!*.po" [view]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kid3-qt]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [luatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [bunzip2]="!*.?(t)bz?(2)" [dvipdfm]="!*.dvi" [kbabel]="!*.po" [ly2dvi]="!*.ly" [oodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [bzme]="!*.@(zip|z|gz|tgz)" [rgview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [pdftex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [xemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [zathura]="!*.@(cb[rz7t]|djv?(u)|?(e)ps|pdf)" [unxz]="!*.@(?(t)xz|tlz|lzma)" [rvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [madplay]="!*.mp3" [xetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [gvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kaffeine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [dviselect]="!*.dvi" [kpdf]="!*.@(?(e)ps|pdf)" [bibtex]="!*.aux" [realplay]="!*.@(rm?(j)|ra?(m)|smi?(l))" [mpg123]="!*.mp3" [netscape]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [lzegrep]="!*.@(tlz|lzma)" [gview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [xv]="!*.@(gif|jp?(e)g?(2)|j2[ck]|jp[2f]|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|?(e)ps)" [lzfgrep]="!*.@(tlz|lzma)" [playmidi]="!*.@(mid?(i)|cmf)" [lzless]="!*.@(tlz|lzma)" [elinks]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [timidity]="!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)" [xdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [xfig]="!*.fig" [xpdf]="!*.@(pdf|fdf)?(.@(gz|GZ|bz2|BZ2|Z))" [lomath]="!*.@(sxm|smf|mml|odf)" [lzcat]="!*.@(tlz|lzma)" [compress]="*.Z" [pdfjadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [kghostview]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [zcat]="!*.@(Z|[gGd]z|t[ag]z)" [pbunzip2]="!*.?(t)bz?(2)" [oobase]="!*.odb" [cdiff]="!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))" [gtranslator]="!*.po" [lynx]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [emacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [zipinfo]="!*.@(zip|[egjswx]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|aab|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz|whl)" [xelatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [uncompress]="!*.Z" [xzcat]="!*.@(?(t)xz|tlz|lzma)" [unzip]="!*.@(zip|[egjswx]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|aab|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz|whl)" [rview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [ogg123]="!*.@(og[ag]|m3u|flac|spx)" [lrunzip]="!*.lrz" [lzgrep]="!*.@(tlz|lzma)" [slitex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [vim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [ggv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [ee]="!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)" [oomath]="!*.@(sxm|smf|mml|odf)" [aaxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [dvipdfmx]="!*.dvi" [advi]="!*.dvi" [gunzip]="!*.@(Z|[gGd]z|t[ag]z)" [makeinfo]="!*.texi*" [gharbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [okular]="!*.@(okular|@(?(e|x)ps|?(E|X)PS|[pf]df|[PF]DF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM)?(.?(gz|GZ|bz2|BZ2|xz|XZ)))" [galeon]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [pdflatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lzmore]="!*.@(tlz|lzma)" [portecle]="!@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)" [oowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [loimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [epiphany]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [modplugplay]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [dvipdf]="!*.dvi" [dillo]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [fbxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" )
command_not_found_handle () 
dequote () 
gawklibpath_append () 
gawklibpath_default () 
gawklibpath_prepend () 
gawkpath_append () 
gawkpath_default () 
gawkpath_prepend () 
nvm () 
nvm_add_iojs_prefix () 
nvm_alias () 
nvm_alias_path () 
nvm_auto () 
nvm_binary_available () 
nvm_cache_dir () 
nvm_cd () 
nvm_change_path () 
nvm_check_file_permissions () 
nvm_clang_version () 
nvm_command_info () 
nvm_compare_checksum () 
nvm_compute_checksum () 
nvm_curl_libz_support () 
nvm_curl_use_compression () 
nvm_curl_version () 
nvm_die_on_prefix () 
nvm_download () 
nvm_download_artifact () 
nvm_echo () 
nvm_echo_with_colors () 
nvm_ensure_default_set () 
nvm_ensure_version_installed () 
nvm_ensure_version_prefix () 
nvm_err () 
nvm_err_with_colors () 
nvm_find_nvmrc () 
nvm_find_project_dir () 
nvm_find_up () 
nvm_format_version () 
nvm_get_arch () 
nvm_get_artifact_compression () 
nvm_get_checksum () 
nvm_get_checksum_alg () 
nvm_get_checksum_binary () 
nvm_get_colors () 
nvm_get_default_packages () 
nvm_get_download_slug () 
nvm_get_latest () 
nvm_get_make_jobs () 
nvm_get_minor_version () 
nvm_get_mirror () 
nvm_get_os () 
nvm_grep () 
nvm_has () 
nvm_has_colors () 
nvm_has_non_aliased () 
nvm_has_solaris_binary () 
nvm_has_system_iojs () 
nvm_has_system_node () 
nvm_install_binary () 
nvm_install_binary_extract () 
nvm_install_default_packages () 
nvm_install_latest_npm () 
nvm_install_npm_if_needed () 
nvm_install_source () 
nvm_iojs_prefix () 
nvm_iojs_version_has_solaris_binary () 
nvm_is_alias () 
nvm_is_iojs_version () 
nvm_is_merged_node_version () 
nvm_is_natural_num () 
nvm_is_valid_version () 
nvm_is_version_installed () 
nvm_is_zsh () 
nvm_list_aliases () 
nvm_ls () 
nvm_ls_current () 
nvm_ls_remote () 
nvm_ls_remote_index_tab () 
nvm_ls_remote_iojs () 
nvm_make_alias () 
nvm_match_version () 
nvm_node_prefix () 
nvm_node_version_has_solaris_binary () 
nvm_normalize_lts () 
nvm_normalize_version () 
nvm_npm_global_modules () 
nvm_npmrc_bad_news_bears () 
nvm_num_version_groups () 
nvm_print_alias_path () 
nvm_print_color_code () 
nvm_print_default_alias () 
nvm_print_formatted_alias () 
nvm_print_implicit_alias () 
nvm_print_npm_version () 
nvm_print_versions () 
nvm_process_parameters () 
nvm_rc_version () 
nvm_remote_version () 
nvm_remote_versions () 
nvm_resolve_alias () 
nvm_resolve_local_alias () 
nvm_sanitize_path () 
nvm_set_colors () 
nvm_stdout_is_terminal () 
nvm_strip_iojs_prefix () 
nvm_strip_path () 
nvm_supports_xz () 
nvm_tree_contains_path () 
nvm_use_if_needed () 
nvm_validate_implicit_alias () 
nvm_version () 
nvm_version_dir () 
nvm_version_greater () 
nvm_version_greater_than_or_equal_to () 
nvm_version_path () 
quote () 
quote_readline () 
snap_bin_path=/snap/bin
snap_xdg_path=/var/lib/snapd/desktop
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}";
}";
}";
}";
